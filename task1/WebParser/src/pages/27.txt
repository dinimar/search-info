
<!DOCTYPE html>
<html lang="ru-ru" dir="ltr" class='com_content view-article itemid-102 j39 mm-hover '>
<head>
<link href="https://www.startandroid.ru/templates/mycustomcss.css" rel="stylesheet" type="text/css">
	<base href="https://startandroid.ru/en/18-courses/dagger-2/432-lesson-1-introduction.html"/>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta name="keywords" content="Dagger, Component, Module, Inject"/>
	<meta name="rights" content="StartAndroid"/>
	<meta name="og:title" content="Lesson 1. Introduction"/>
	<meta name="og:type" content="article"/>
	<meta name="og:url" content="https://startandroid.ru/en/18-courses/dagger-2/432-lesson-1-introduction.html"/>
	<meta name="og:site_name" content="StartAndroid"/>
	<meta name="og:description" content="Сайт о разработке программ для Андроид (Android). Учебник, уроки для начинающих, для чайников. Как самому создать приложение для андроид. Как научиться программировать под android."/>
	<meta name="author" content="Дмитрий Виноградов"/>
	<meta name="description" content="Сайт о разработке программ для Андроид (Android). Учебник, уроки для начинающих, для чайников. Как самому создать приложение для андроид. Как научиться программировать под android."/>
	<meta name="generator" content="Joomla! - Open Source Content Management"/>
	<title>Lesson 1. Introduction</title>
	<link href="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html" rel="alternate" hreflang="ru-RU"/>
	<link href="https://startandroid.ru/en/18-courses/dagger-2/432-lesson-1-introduction.html" rel="alternate" hreflang="en-GB"/>
	<link href="/templates/purity_iii/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon"/>
	<link href="/A.templates,,_purity_iii,,_local,,_css,,_bootstrap.css+components,,_com_jcomments,,_tpl,,_default,,_style.css,,qv==3002+plugins,,_content,,_hs_highlighter,,_lib,,_styles,,_shCore.css+plugins,,_content,,_hs_highlighter,,_lib,,_styles,,_shThemeDefault.css,Mcc.g9s2Fj-V5G.css.pagespeed.cf.C1U8Cas-X8.css" rel="stylesheet" type="text/css"/>
	
	
	
	<link href="http://www.startandroid.ru/plugins/content/jfusion/discussbot/tmpl/default/jfusion.css" rel="stylesheet" type="text/css"/>
	<link href="/A.templates,,_system,,_css,,_system.css+templates,,_purity_iii,,_local,,_css,,_template.css+templates,,_purity_iii,,_local,,_css,,_megamenu.css+templates,,_purity_iii,,_local,,_css,,_off-canvas.css+templates,,_purity_iii,,_fonts,,_font-awesome,,_css,,_font-awesome.min.css+templates,,_purity_iii,,_local,,_css,,_layouts,,_corporate.css+plugins,,_system,,_mediabox_ck,,_assets,,_mediaboxck.css+media,,_mod_languages,,_css,,_template.css,,q092552cf642fe2bdd8a0d9879112de23,Mcc.8bkeEgaG8c.css.pagespeed.cf.NQwL-2HVTk.css" rel="stylesheet" type="text/css"/>
	
	
	
	
	
	
	
	<style type="text/css">#mbCenter,#mbToolbar{background-color:#1a1a1a;-webkit-border-radius:10px;-khtml-border-radius:10px;-moz-border-radius:10px;border-radius:10px;-webkit-box-shadow:0 5px 20px rgba(0,0,0,.50);-khtml-box-shadow:0 5px 20px rgba(0,0,0,.50);-moz-box-shadow:0 5px 20px rgba(0,0,0,.50);box-shadow:0 5px 20px rgba(0,0,0,.50);-ms-filter:"progid:DXImageTransform.Microsoft.Shadow(Strength=5, Direction=180, Color='#000000')";filter: progid:DXImageTransform.Microsoft.Shadow(Strength=5, Direction=180, Color='#000000')}#mbOverlay{background-color:#000}#mbCenter.mbLoading{background-color:#1a1a1a}#mbBottom{color:#999}#mbTitle,#mbPrevLink,#mbNextLink,#mbCloseLink,#mbPlayLink,#mbPauseLink,#mbZoomMinus,#mbZoomValue,#mbZoomPlus{color:#fff}</style>
	<script type="application/json" class="joomla-script-options new">{"csrf.token":"ed37a4ab8f272e400044c1ea8adb7ccf","system.paths":{"root":"","base":""},"joomla.jtext":{"BUTTON_CANCEL":"Cancel","BUTTON_INITIATE":"Initiate Discussion","BUTTON_PUBLISH_NEW_DISCUSSION":"Publish New Discussion","BUTTON_REPUBLISH_DISCUSSION":"Republish Discussion","BUTTON_UNPUBLISH_DISCUSSION":"Unpublish Discussion","CONFIRM_THREAD_CREATION":"Initiate the discussion bot for this article? A thread will automatically be created in the forum and associated with this article.","CONFIRM_UNPUBLISH_DISCUSSION":"Do you want to unpublish this discussion? Note that this will not manipulate the forum in any way. It will simply remove the discussion from the article.","CONFIRM_PUBLISH_DISCUSSION":"This article has been previously initiated. Click 'Republish Discussion' to associate the article with the existing discussion (this can be undone by simply clicking 'Uninitiate Discussion' after initializing). Or click 'Publish New Discussion' to create a new thread and associate the article with the new discussion.","DISCUSSBOT_ERROR":"Error","HIDE_REPLIES":"Hide Replies","JYES":"Yes","SHOW_REPLIES":"Show Replies","SUBMITTING_QUICK_REPLY":"Submitting quick reply..."}}</script>
	<script src="/media/system/js/mootools-core.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.jm.ywlvbuicbl.js" type="text/javascript"></script>
	<script src="/media/system/js/core.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.ce.I4kCTD093I.js" type="text/javascript"></script>
	<script src="/media/system/js/mootools-more.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.jm.-6O1zP2hFm.js" type="text/javascript"></script>
	<script src="/plugins/content/hs_highlighter/lib/scripts/shCore.js+shAutoloader.js.pagespeed.jc.WXf0A72UUc.js"></script><script>eval(mod_pagespeed_su9IpL5SVr);</script>
	<script>eval(mod_pagespeed_WeiLV__hGm);</script>
	<script src="/media/jui/js/jquery.min.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.jm.Esjhv-eXHl.js" type="text/javascript"></script>
	<script src="/media,_jui,_js,_jquery-noconflict.js,q092552cf642fe2bdd8a0d9879112de23+media,_jui,_js,_jquery-migrate.min.js,q092552cf642fe2bdd8a0d9879112de23+media,_system,_js,_caption.js,q092552cf642fe2bdd8a0d9879112de23+plugins,_system,_t3,_base-bs3,_bootstrap,_js,_bootstrap.js,q092552cf642fe2bdd8a0d9879112de23+plugins,_system,_t3,_base-bs3,_js,_jquery.tap.min.js.pagespeed.jc.Ed2PAi7Y_z.js"></script><script>eval(mod_pagespeed_mx8RjjKG3V);</script>
	<script>eval(mod_pagespeed_EEHT5I5lbD);</script>
	<script src="http://www.startandroid.ru/plugins/content/jfusion/discussbot/tmpl/default/jfusion.js" type="text/javascript"></script>
	<script>eval(mod_pagespeed_UCstg9erlS);</script>
	<script>eval(mod_pagespeed_y3OBNTle2M);</script>
	<script>eval(mod_pagespeed_1XadJYvQRa);</script>
	<script src="/plugins,_system,_t3,_base-bs3,_js,_off-canvas.js+plugins,_system,_t3,_base-bs3,_js,_script.js+plugins,_system,_t3,_base-bs3,_js,_menu.js+templates,_purity_iii,_js,_script.js+plugins,_system,_t3,_base-bs3,_js,_nav-collapse.js+plugins,_system,_mediabox_ck,_assets,_mediaboxck.min.js,qver==2.4.0.pagespeed.jc.tzMQyIb0Wy.js"></script><script>eval(mod_pagespeed_r6BAo9HvrJ);</script>
	<script>eval(mod_pagespeed_$6DR3H2ba0);</script>
	<script>eval(mod_pagespeed_oaBYG6qGe9);</script>
	<script>eval(mod_pagespeed_AmCkxaCr$c);</script>
	<script>eval(mod_pagespeed_ZlfQYd6O1_);</script>
	<script>eval(mod_pagespeed_rDcvdPCnuH);</script>
	<script type="text/javascript">window.addEvent('load',function(){var siteurl='https://startandroid.ru/';function path(){var args=arguments,result=[];for(var i=0;i<args.length;i++){result.push(args[i].replace('@',[siteurl,'plugins/content/hs_highlighter/lib/scripts/'].join('')));}return result;};SyntaxHighlighter.autoloader.apply(null,path('applescript            @shBrushAppleScript.js','actionscript3 as3      @shBrushAS3.js','bash shell             @shBrushBash.js','coldfusion cf          @shBrushColdFusion.js','cpp c                  @shBrushCpp.js','c# c-sharp csharp      @shBrushCSharp.js','css                    @shBrushCss.js','delphi pascal          @shBrushDelphi.js','diff patch pas         @shBrushDiff.js','erl erlang             @shBrushErlang.js','groovy                 @shBrushGroovy.js','java                   @shBrushJava.js','jfx javafx             @shBrushJavaFX.js','js jscript javascript  @shBrushJScript.js','perl pl                @shBrushPerl.js','php                    @shBrushPhp.js','text plain             @shBrushPlain.js','py python              @shBrushPython.js','ruby rails ror rb      @shBrushRuby.js','sass scss              @shBrushSass.js','scala                  @shBrushScala.js','sql                    @shBrushSql.js','vb vbnet               @shBrushVb.js','xml xhtml xslt html    @shBrushXml.js'));SyntaxHighlighter.defaults['auto-links']=false;SyntaxHighlighter.defaults['toolbar']=false;;SyntaxHighlighter.all();});JFusion.view='article';JFusion.enablePagination=1;JFusion.enableJumpto=0;JFusion.articelUrl[432]='/en/18-courses/dagger-2/432-lesson-1-introduction.html';jQuery(window).on('load',function(){new JCaption('img.caption');});jQuery(function($){initTooltips();$("body").on("subform-row-add",initTooltips);function initTooltips(event,container){container=container||document;$(container).find(".hasTooltip").tooltip({"html":true,"container":"body"});}});Mediabox.scanPage=function(){var links=jQuery('a').filter(function(i){if(jQuery(this).attr('rel')&&jQuery(this).data('mediaboxck_done')!='1'){var patt=new RegExp(/^lightbox/i);return patt.test(jQuery(this).attr('rel'));}});if(!links.length)return false;new Mediaboxck(links,{overlayOpacity:0.7,resizeOpening:1,resizeDuration:240,initialWidth:320,initialHeight:180,fullWidth:'0',defaultWidth:'640',defaultHeight:'360',showCaption:1,showCounter:1,loop:0,isMobileEnable:1,isMobile:false,mobileResolution:'640',attribType:'rel',showToolbar:'0',diapoTime:'3000',diapoAutoplay:'0',toolbarSize:'normal',medialoop:false,showZoom:0,counterText:'({x} of {y})',playerpath:'/plugins/system/mediabox_ck/assets/NonverBlaster.swf'},null,function(curlink,el){var rel0=curlink.rel.replace(/[[]|]/gi," ");var relsize=rel0.split(" ");return(curlink==el)||((curlink.rel.length>8)&&el.rel.match(relsize[1]));});};jQuery(document).ready(function(){Mediabox.scanPage();});</script>
	<link href="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html" rel="alternate" hreflang="x-default"/>

	
<!-- META FOR IOS & HANDHELD -->
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
	<style type="text/stylesheet">@-webkit-viewport   { width: device-width; }@-moz-viewport      { width: device-width; }@-ms-viewport       { width: device-width; }@-o-viewport        { width: device-width; }@viewport           { width: device-width; }</style>
	<script type="text/javascript">if(navigator.userAgent.match(/IEMobile\/10\.0/)){var msViewportStyle=document.createElement("style");msViewportStyle.appendChild(document.createTextNode("@-ms-viewport{width:auto!important}"));document.getElementsByTagName("head")[0].appendChild(msViewportStyle);}</script>
<meta name="HandheldFriendly" content="true"/>
<meta name="apple-mobile-web-app-capable" content="YES"/>
<!-- //META FOR IOS & HANDHELD -->




<!-- Le HTML5 shim and media query for IE8 support -->
<!--[if lt IE 9]>
<script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
<script type="text/javascript" src="/plugins/system/t3/base-bs3/js/respond.min.js"></script>
<![endif]-->

<!-- You can add Google Analytics here or use T3 Injection feature -->

<!--[if lt IE 9]>
<link rel="stylesheet" href="/templates/purity_iii/css/ie8.css" type="text/css" />
<![endif]-->
	</head>

<body>

<div class="t3-wrapper corporate"> <!-- Need this wrapper for off-canvas menu. Remove if you don't use of-canvas -->

	
<!-- MAIN NAVIGATION -->
<header id="t3-mainnav" class="wrap navbar navbar-default navbar-fixed-top t3-mainnav">

	<!-- OFF-CANVAS -->
			
<button class="btn btn-default off-canvas-toggle " type="button" data-pos="left" data-nav="#t3-off-canvas" data-effect="off-canvas-effect-4">
  <i class="fa fa-bars"></i>
</button>

<!-- OFF-CANVAS SIDEBAR -->
<div id="t3-off-canvas" class="t3-off-canvas ">

  <div class="t3-off-canvas-header">
    <h2 class="t3-off-canvas-header-title">Sidebar</h2>
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
  </div>

  <div class="t3-off-canvas-body">
    <div class="t3-module module " id="Mod100"><div class="module-inner"><h3 class="module-title "><span>Most read</span></h3><div class="module-ct"><ul class="mostread mod-list">
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/225-lesson-19-creating-a-simple-calculator.html" itemprop="url">
			<span itemprop="name">
				Lesson 19. Creating a simple calculator			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/220-lesson-16-creating-layout-programmatically-layoutparams.html" itemprop="url">
			<span itemprop="name">
				Lesson 16. Creating layout programmatically. LayoutParams			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/241-lesson-28-extras-passing-data-using-intent.html" itemprop="url">
			<span itemprop="name">
				Lesson 28. Extras - passing data using Intent			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/210-lesson-9-event-listeners-with-button-example.html" itemprop="url">
			<span itemprop="name">
				Lesson 9. Event listeners with Button example			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/232-lesson-24-activity-lifecycle-example-about-changing-states-with-two-activities.html" itemprop="url">
			<span itemprop="name">
				Lesson 24. Activity Lifecycle, example about changing states with two Activities			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/207-lesson-6-layout-types-key-differences-and-properties.html" itemprop="url">
			<span itemprop="name">
				Lesson 6. Layout types. Key differences and properties			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/224-lesson-18-changing-layoutparams-in-a-running-application.html" itemprop="url">
			<span itemprop="name">
				Lesson 18. Changing layoutParams in a running application			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/227-lesson-21-creating-and-starting-an-activity.html" itemprop="url">
			<span itemprop="name">
				Lesson 21. Creating and starting an Activity			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/203-lesson-5-layout-file-fo-ractivity-xml-representation-changing-screen-orientation.html" itemprop="url">
			<span itemprop="name">
				Lesson 5. Layout-file for Activity. XML Representation. Changing screen orientation			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/213-lesson-10-optimizing-event-listeners-implementation.html" itemprop="url">
			<span itemprop="name">
				Lesson 10. Optimizing event listeners implementation			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/201-lesson3-creating-avd-the-first-application-android-project-structure.html" itemprop="url">
			<span itemprop="name">
				Lesson 3. Creating AVD. The first application. Android project structure			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/200-lesson-2-installing-and-configuring-development-environment-eclipse-and-sdk-tools.html" itemprop="url">
			<span itemprop="name">
				Lesson 2. Installing and configuring development environment Eclipse and SDK Tools			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/218-lesson-14-menu-groups-order-menuinflater-and-xml-menu.html" itemprop="url">
			<span itemprop="name">
				Lesson 14. Menu, groups, order. MenuInflater and xml-menu			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/214-lesson-11-resvalues-folder-using-application-resources.html" itemprop="url">
			<span itemprop="name">
				Lesson 11. res/values folder. Using application resources			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/208-lesson-7-layout-parameters-for-view-elements.html" itemprop="url">
			<span itemprop="name">
				Lesson 7. Layout parameters for View-elements			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/229-lesson-22-intent-intent-filter-context-theory.html" itemprop="url">
			<span itemprop="name">
				Lesson 22. Intent, Intent Filter, Context - theory			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/219-lesson-15-context-menu.html" itemprop="url">
			<span itemprop="name">
				Lesson 15. Context menu			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/215-lesson-12-logs-and-toast-messages.html" itemprop="url">
			<span itemprop="name">
				Lesson 12. Logs and Toast messages.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/199-lesson-1-introduction.html" itemprop="url">
			<span itemprop="name">
				Lesson 1. Introduction			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/en/lessons/202-lesson-4-layout-elements-and-their-properties.html" itemprop="url">
			<span itemprop="name">
				Lesson 4. Layout elements and their properties			</span>
		</a>
	</li>
</ul>
</div></div></div>
  </div>

</div>
<!-- //OFF-CANVAS SIDEBAR -->

		<!-- //OFF-CANVAS -->

	<div class="container">

		<!-- NAVBAR HEADER -->
		<div class="navbar-header">

			<!-- LOGO -->
			<div class="logo logo-text">
				<div class="logo-text">
					<a href="/" title="StartAndroid">
						
												
						<span>StartAndroid</span>
					</a>
				</div>
			</div>
			<!-- //LOGO -->

											<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".t3-navbar-collapse">
					<i class="fa fa-bars"></i>
				</button>
			
	    
		</div>
		<!-- //NAVBAR HEADER -->

		<!-- NAVBAR MAIN -->
				<nav class="t3-navbar-collapse navbar-collapse collapse"></nav>
		
		<nav class="t3-navbar navbar-collapse collapse">
			<div class="t3-megamenu animate elastic" data-duration="400" data-responsive="true">
<ul itemscope itemtype="http://www.schema.org/SiteNavigationElement" class="nav navbar-nav level0">
<li itemprop='name' class="current active" data-id="102" data-level="1">
<a itemprop='url' class="" href="/en/" data-target="#">Home </a>

</li>
<li itemprop='name' data-id="106" data-level="1">
<a itemprop='url' class="" href="/en/lessons.html" data-target="#">Lessons </a>

</li>
<li itemprop='name' class="dropdown mega" data-id="135" data-level="1">
<a itemprop='url' class="customlight-background dropdown-toggle" href="#" data-target="#" data-toggle="dropdown">Courses<em class="caret"></em></a>

<div class="nav-child dropdown-menu mega-dropdown-menu"><div class="mega-dropdown-inner">
<div class="row">
<div class="col-xs-12 mega-col-nav" data-width="12"><div class="mega-inner">
<ul itemscope itemtype="http://www.schema.org/SiteNavigationElement" class="mega-nav level1">
<li itemprop='name' data-id="136" data-level="2">
<a itemprop='url' class="" href="/en/courses-en/dagger-2.html" data-target="#">Dagger 2 </a>

</li>
</ul>
</div></div>
</div>
</div></div>
</li>
<li itemprop='name' data-id="141" data-level="1">
<a itemprop='url' class="" href="/en/login.html" data-target="#">Log in </a>

</li>
</ul>
</div>

		</nav>
    <!-- //NAVBAR MAIN -->

	</div>
</header>
<!-- //MAIN NAVIGATION -->






  


  


	
<div id="t3-mainbody" class="container t3-mainbody">
	<div class="row">

		<!-- MAIN CONTENT -->
		<div id="t3-content" class="t3-content col-xs-12 col-sm-8 col-sm-push-4 col-md-9 col-md-push-3">
						<div class="page-header clearfix">
		<h1 class="page-title">Home</h1>
	</div>

<div class="item-page clearfix">


<!-- Article -->
<article>
	<meta itemprop="inLanguage" content="en-GB"/>
	<meta itemprop="url" content="/en/18-courses/dagger-2/432-lesson-1-introduction.html"/>

      
<header class="article-header clearfix">
	<h1 class="article-title" itemprop="headline">
					<a href="/en/18-courses/dagger-2/432-lesson-1-introduction.html" itemprop="url" title="Lesson 1. Introduction">
				Lesson 1. Introduction</a>
			</h1>

			</header>
    
    
  <!-- Aside -->
    <aside class="article-aside clearfix">
          	<dl class="article-info  muted">

		
			<dt class="article-info-term">
													Details							</dt>

			
			
			
										<dd class="published hasTooltip" title="Published: ">
				<i class="icon-calendar"></i>
				<time datetime="2016-10-25T17:19:20+03:00" itemprop="datePublished">
					25 October 2016				</time>
			</dd>					
					
			
						</dl>
        
      </aside>  
    <!-- //Aside -->

  
  
  
	
  
	
	<section class="article-content clearfix">
		<p>This lesson will provide you with detailed information about Dagger and what it can do. We will discuss the notions of a component and module, connect Dagger to a project and look at a couple of simple examples.</p>
 
<p> </p>
<h1>What is Dagger for?</h1>
<p>If you would like to decrease the inter-object dependency and simplify the procedure of developing tests for your code, the Dependency Injection is exactly what you want. Dagger, on the other hand, is a library that will help to implement the pattern. In this mini training course I will describe how to use the Dagger library version 2 (we will refer to it simply as Dagger).</p>
<p>The advantages of Dagger as opposed to the other libraries out there are as follows:<br/>- it helps to generate code that is easy to understand and debug;<br/>- it checks dependencies at compilation stage;<br/>- it does not create any issues, when proguard is used.</p>
<p>I can tell you right away that this is quite a challenging topic, and questions like “and what would happen if I did this” are expected. Unfortunately, I cannot discuss all the possible cases, which is why I strongly recommend that you create examples and run tests on how different things work under different circumstances using those examples. In my experience, real-life examples have significantly helped me understand the theory better.</p>
<p>In order to understand why it is that we might need Dependency Injection and Dagger, let's consider a small abstract example. We will model a situation, where we create one object and that entails creation of several more objects.</p>
<p>Say, we have a certain MainActivity in our application. And, according to the MVP pattern, we have a presenter for such MainActivity. In order for the presenter to work, we would need a certain ItemController and DataController. That means that we will have to create two of these objects before we create the presenter. However, in order to create these two objects, we would need the ApiService and SharedPreferences objects. And we cannot have the ApiService without RestAdapter, RestAdapter.Builder, OkHttpClient and Cashe.</p>
<p>In a standard implementation, this could look as follows:</p>
<pre class="brush:java">public class MainActivity extends Activity {

    MainActivityPresenter activityPresenter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        File cacheDirectory = new File("some path");
        Cashe cashe = new HttpResponseCache(cacheDirectory, 50 * 1024 * 1024);

        OkHttpClient httpClient = new OkHttpClient();
        httpClient.setCache(cashe);

        RestAdapter.Builder builder = new RestAdapter.Builder();
        builder.setClient(new OkClient(httpClient));
        RestAdapter restAdapter = builder.build();
        ApiService apiService = restAdapter.create(ApiService.class);

        ItemController itemController = new ItemController(apiService);

        SharedPreferences preference = getSharedPreferences("item_prefs", MODE_PRIVATE);
        DataController dataController = new DataController(preference);

        activityPresenter = new MainActivityPresenter(this, itemController, dataController);
    }

}</pre>
<p>We create a lot of objects in MainActivity in order to simply get one presenter. In this example we do not really care which objects are being created. The main thing is how much code would need to be written in the MainActivity for us to get the desired outcome.</p>
<p>If we apply the Dependency Injection pattern and use Dagger, the code in the Activity would look like this:</p>
<pre class="brush:java">public class MainActivity extends Activity {

    MainActivityPresenter activityPresenter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        activityPresenter = App.getComponent().getPresenter();
    }
}</pre>
<p>Of course, the code for creating the objects did not go anywhere. But it has been moved from the Activity to individual classes, which Dagger can access. As a result, we just call the getPresenter method to get the MainActivityPresenter object. And Dagger will then go ahead and create that object and the entire hierarchy of objects required for it.</p>
<p>We could do the same without Dagger by simply moving the code for creating the objects into a method like MainActivityPresenter.createInstance(). But if we have a different presenter, which partially needs the same objects in the createInstance method for such other presenter, we would have to duplicate the code for creating certain objects.</p>
<p>If we use Dagger, the code for creating the required object would only exist in one place and as one instance. And Dagger would then use that code everywhere we need to create an object.</p>
<p> </p>
<p> </p>
<h1>Theory</h1>
<p>Now, let's look at how Dagger works from the inside.</p>
<p>Let's consider the same example with Activity and Presenter, where Activity creates the Presenter object for its purposes. The regular creation algorithm would look as follows:</p>
<p>Activity -&gt; Presenter</p>
<p>Here we see that Activity creates Presenter by itself.</p>
<p> </p>
<p>If we use Dagger, the algorithm would looks as follows:</p>
<p>Activity -&gt; Component -&gt; Module -&gt; Presenter</p>
<p>The Activity accesses the component, and the component then uses the modules to create the Presenter and return it to the Activity.</p>
<p> </p>
<p>Modules and components are the two key notions in Dagger.</p>
<p> </p>
<p><strong>Modules</strong> are simply classes, where we put the code used to create the objects. Normally each module comprises objects that are similar in their purpose. For example:</p>
<p>The ItemModule would contain the code used to create the objects associated with users, that is, something like Item and ItemController.</p>
<p>The NetworkModule includes the OkHttpClient and ApiService objects.</p>
<p>The StorageModule consists of the DataController and SharedPreferences objects.</p>
<p> </p>
<p><strong>Component</strong>, on the other hand, is agent between the Activity and the modules. When the Activity needs a certain object, it accesses the component. The component knows which module can be used to create the object, so it requests that the module create the object and return it to the Activity. Note that the component can use other modules to create the entire hierarchy of objects required to generate the desired object.</p>
<p> </p>
<p>We can actually compare the process of how Dagger works with a lunch at McDonald's. So, if we use the Dagger algorithm as analogy:</p>
<p>Activity -&gt; Component -&gt; Module -&gt; Presenter</p>
<p>the McDonald's lunch algorithm would look as follows:</p>
<p>Customer -&gt; Cashier -&gt; Production Line -&gt; Order (Big Mac/Fries/Coke).</p>
<p><br/>Let's look at the steps of those algorithms in more detail:</p>
<table style="margin-left: auto; margin-right: auto;" border="2">
<tbody>
<tr style="height: 15px;">
<td style="text-align: center; width: 425px; height: 15px;"><strong>McDonalds</strong></td>
<td style="text-align: center; width: 433px; height: 15px;"><strong>Dagger</strong></td>
</tr>
<tr style="height: 30px;">
<td style="width: 425px; text-align: center; height: 30px;">The customer has decided to order a Big Mac, fries and Coke. So he places his order with a cashier</td>
<td style="width: 433px; text-align: center; height: 30px;">The Activity tells the component that it would need a Presenter</td>
</tr>
<tr style="height: 30px;">
<td style="width: 425px; text-align: center; height: 30px;">The cashier then goes to the production line and puts the order together: he takes a Big Mac, pours a glass of Coke, puts the fries onto the tray</td>
<td style="width: 433px; text-align: center; height: 30px;">The component goes through the modules and creates all the objects required to create the Presenter</td>
</tr>
<tr style="height: 13.3438px;">
<td style="width: 425px; text-align: center; height: 13.3438px;">Then the Cashier places all the items into the bag and hands the bag over to the customer</td>
<td style="width: 433px; text-align: center; height: 13.3438px;">The component creates the required object - Presenter - and provides it to the Activity</td>
</tr>
</tbody>
</table>
<p> </p>
<p> </p>
<h1>Real Life Examples</h1>
<p>Now, let's consider a simple real-life example of how to create modules and components, and how the Activity would use those modules and components to receive the required objects.</p>
<p> </p>
<h2>Connecting Dagger to a Project</h2>
<p>Create a new project. In order to be able to use Dagger, add the following lines at the end of the build.gradle file in your module:</p>
<pre class="brush:groovy">// Add plugin https://bitbucket.org/hvisser/android-apt
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

// Apply plugin
apply plugin: 'com.neenbedankt.android-apt'

// Add Dagger dependencies
dependencies {
    compile 'com.google.dagger:dagger:2.7'
    apt 'com.google.dagger:dagger-compiler:2.7'
}</pre>
<p>If for some reason something is not working right, you can download the <a href="https://github.com/startandroid/Dagger2_FirstProject" rel="alternate">ready-to-use work project</a> here.</p>
<p> </p>
<p>We will use the following two classes as the objects that we will request from Dagger: DatabaseHelper and NetworkUtils.</p>
<pre class="brush:java">public class DatabaseHelper {
  
}</pre>
<p> </p>
<pre class="brush:java">public class NetworkUtils {

}</pre>
<p>We do not care about their implementation right now, so we just leave them blank.</p>
<p> </p>
<p>Let's say, we need these objects in the MainActivity</p>
<pre class="brush:java">public class MainActivity extends Activity {

    DatabaseHelper databaseHelper;
    NetworkUtils networkUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}</pre>
<p>In order to get them using Dagger, we will need to create the modules and component.</p>
<p> </p>
<p>So we go ahead and create modules that would know how to provide the required objects. It is precisely in the modules that we write the entire code used to create the objects. These are regular classes, but with a number of annotations:</p>
<pre class="brush:java">@Module
public class NetworkModule {

    @Provides
    NetworkUtils provideNetworkUtils() {
        return new NetworkUtils();
    }

}</pre>
<p> </p>
<pre class="brush:java">@Module
public class StorageModule {

    @Provides
    DatabaseHelper provideDatabaseHelper() {
        return new DatabaseHelper();
    }

}</pre>
<p>We use the <strong>@Module</strong> annotation to tell Dagger that this class is a module, while the <strong>@Provides</strong> annotation indicates that this method can supply an object, and the component can use it to get that object. From the technical standpoint, we could pretty much manage with just one module. But it would be much more logical to break down the object into modules based on their intended application and purpose.</p>
<p>Now that the modules are ready, let's create the component. In order to do that, we need to create an interface.</p>
<p> </p>
<pre class="brush:java">@Component()
public interface AppComponent {

}</pre>
<p>This interface describes a blank component, which for now will know how to do nothing. When the project is compiled, Dagger will find that interface using the @Component annotation and generate the DaggerAppComponent class, which implements this interface. This would be the component class.</p>
<p>All we need to do is fill the interface with methods. By doing so we will let the component know, which objects it has to be able to return to us. And when the project gets compiled, Dagger itself will implement them in the generated component class.</p>
<p>The component can return objects to us in one of the two ways. The first way is the regular get methods. This means that we simply call the method, which returns us the object. The second way is more interesting and involves using the inject methods. In this case we provide the component with an instance of the Activity, and the component then fills in all the required fields by itself creating the required objects.</p>
<p>Let's consider these two options using examples:</p>
<p> </p>
<h2>Get methods</h2>
<p>Let's complement the interface, so that the component would know how to create objects for us.</p>
<pre class="brush:java">@Component(modules = {StorageModule.class, NetworkModule.class})
public interface AppComponent {
    NetworkUtils getNetworkUtils();
    DatabaseHelper getDatabaseHelper();
}</pre>
<p>The modules list includes the modules, in which the component can search for the code required to create objects.</p>
<p>Methods can have various names. The most important thing is the types returned by such methods (NetworkUtils and DatabaseHelper). They let the component know, which objects it is that we want it to return to us. At the time of compilation Dagger will check, which object can be taken from which module and will generate the respective code for creating these objects in implementation of these two methods. While we will simply call these component methods in the MainActivity in order to get the finished objects.</p>
<p> </p>
<p>All that's left is to describe the creation of a component instance somewhere. And we will use the Application class to do that. Don't forget to add it to the manifest.</p>
<pre class="brush:java">public class App extends Application {

    private static AppComponent component;

    @Override
    public void onCreate() {
        super.onCreate();
        component = DaggerAppComponent.create();
    }

    public static AppComponent getComponent() {
        return component;
    }

}</pre>
<p>Now, we create the component in the onCreate method. At this point your development framework will most likely get upset about the Dagger AppComponent class. This happens because the Dagger AppComponent class does not exist quite yet. We have just described the interface of the AppComponent class, but we need to compile the project for Dagger to create this component class.</p>
<p>Compile the project. If you are using Android Studio, you can do it from the following menu: Build -&gt; Make Project (CTRL+F9). Once the process is complete, the Dagger AppComponent class will be created in the build\generated\ folder. The Studio now knows this class and should be offering you to add it to import, so that the code would contain no errors.</p>
<p> </p>
<p>We can now use this component in the MainActivity, in order to get the ready-to-use DatabaseHelper and NetworkUtils objects.</p>
<pre class="brush:java">public class MainActivity extends Activity {

    DatabaseHelper databaseHelper;
    NetworkUtils networkUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        databaseHelper = App.getComponent().getDatabaseHelper();
        networkUtils = App.getComponent().getNetworkUtils();
    }
}</pre>
<p> </p>
<p>Once we run the application, Dagger will create the objects. If the whole thing is crashing with an NPE, make sure that you have added the App class to the manifest.</p>
<p><br/> </p>
<h2>Inject methods</h2>
<p>As of right now we have two objects in the MainActivity, and we receive those from the component. But if instead there were 20 objects, we would have to describe 20 get methods in the component interface and write 20 calls for such methods in the MainActivity code. Luckily for us, Dagger offers a more convenient solution for cases like that. We can teach the component to not only return objects, but to also fill the Activity with the required objects by itself. That means that we would give the component an instance of the MainActivity, and the component would then decide which objects are needed, create them and place them into the respective fields, all by itself.</p>
<p>Let's rewrite the component interface:</p>
<pre class="brush:java">@Component(modules = {StorageModule.class, NetworkModule.class})
public interface AppComponent {
    void injectsMainActivity(MainActivity mainActivity);
}</pre>
<p>We will describe one inject method instead of a couple of get methods. The name can be anything you want. The main thing is the type of its only parameter. Here we indicate the MainActivity. This way we are telling the component that when we call this method and provide it with the MainActivity instance, we expect that the component would fill the instance with the required objects.</p>
<p>When the project gets compiled, Dagger would see this method in the interface, go through the MainActivity class in search of the fields (marked with special annotations) and determine which objects it would need to create. As a result, Dagger implements the injectsMainActivity method in the component class in order for the component to receive objects from its modules and insert them into the respective variables of the MainActivity instance returned to it.</p>
<p> </p>
<p>Let's rewrite MainActivity:</p>
<p> </p>
<pre class="brush:java">public class MainActivity extends Activity {

    @Inject
    DatabaseHelper databaseHelper;

    @Inject
    NetworkUtils networkUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        App.getComponent().injectsMainActivity(this);
    }
    
}</pre>
<p>We use the @Inject annotations to mark the fields, which the component needs to fill in. When the injectsMainActivity is called, the component will take the DatabaseHelper and NetworkUtils objects from the modules and place them into the MainActivity fields.</p>
<p>We can see this mechanism in the component class code generated by Dagger. The injectsMainActivity method looks as follows:</p>
<pre class="brush:java">    public void injectsMainActivity(MainActivity mainActivity) {
        mainActivityMembersInjector.injectMembers(mainActivity);
    }</pre>
<p> </p>
<p>If we go further and look inside mainActivityMembersInjector.injectMembers, we will see the following:</p>
<pre class="brush:java">    @Override
    public void injectMembers(MainActivity instance) {
        if (instance == null) {
            throw new NullPointerException("Cannot inject members into a null reference");
        }
        instance.databaseHelper = databaseHelperProvider.get();
        instance.networkUtils = networkUtilsProvider.get();
    }</pre>
<p>What we see here is simply the null check and assignment of objects to the MainActivity fields.</p>
<p> </p>
<p>It goes without saying that both, the get methods and the inject methods can be used together within one component. I have described them separately for clarity purposes only.</p>
<p> </p>
<p> </p>
<h2>Dependency Graph</h2>
<p>The total of all the objects, which the component can generate, is referred to as the component object graph or component dependency graph. If we look at the example above, that graph consists of only two objects: DatabaseHelper and NetworkUtils. The component knows how to create these objects and can provide them.</p>
<p>In some cases, when the component creates one object, it might require another object. We have already talked about that at the very beginning of this lesson, when in order to create one presenter, we had to create another dozen of objects.</p>
<p>Let's look at an example of a module.</p>
<p> </p>
<pre class="brush:java">@Module
public class NetworkModule {

    @Provides NetworkUtils provideNetworkUtils(HttpClient httpClient) {
        return new NetworkUtils(httpClient);
    }

    @Provides HttpClient provideHttpClient() {
        return new HttpClient();
    }

}</pre>
<p>When we request the component to provide the NetworkUtils object, the component will go to that module and call the provideNetworkUtils method. But that method needs the HttpClient object to enter. The component then looks for such a module within the component that would be able to create such object and finds the required object within such module. It calls the provideHttpClient method, gets the HttpClient object and uses it to call the provideNetworkUtils method. What this means is, that if an object needs other objects for it to be created, you will have to describe creation of all these objects in the modules. In this case the component will create the entire chain and get the desired object.</p>
<p>There are cases, when not everything can easily be created in the modules and some objects might be required from outside Dagger. I will describe a case like that in one of my future lessons.</p>
<p> </p>
<h2>Detection of Errors</h2>
<p>One of the advantages of using Dagger is that if you have some kind of error in building dependencies, you will find out about it at the stage of compilation, rather than in Runtime. Let's check that. We will create another blank class called Preferences</p>
<pre class="brush:java">public class Preferences {
    
}</pre>
<p> </p>
<p>We will also add a variable of this type with the Inject annotation to the MainActivity:</p>
<pre class="brush:java">@Inject
Preferences preferences; </pre>
<p>Now, if we call the inject method, the component must create the Preferences object, but we have not added a description of how this object is created into the modules. So the component simply does not know where to get this object.</p>
<p>Let's try and compile the project. We will get this error:<br/><em>Error: (24, 10) error: Preferences cannot be provided without an @Inject constructor or from an @Provides- or @Produces-annotated method.</em></p>
<p>The compiler quite logically complains that it does not know where the component would take the Preferences object from.</p>
<p> </p>
<h2>What Next?</h2>
<p>In this lesson we have talked about the basics of working with Dagger. We have not touched upon any specific details or difficulties. After you read it, you will be able to understand the general principle of how Dagger works and the role of the component and modules in it. In the next lessons we will talk about additional features of creating objects offered by Dagger. We will discuss one example of how components can be organized in a small application. We will also explore the ability of the component to create objects in a separate thread.</p>
<p> </p><div><hr>
<!-- START: Modules Anywhere -->

<div class="custom">
	<p>Присоединяйтесь к нам в <b>Telegram</b>:</p>
<p>- в канале <a href="https://t.me/startandroid" target="_blank" rel="alternate noopener noreferrer">StartAndroid</a> публикуются ссылки на новые статьи с сайта startandroid.ru и интересные материалы с хабра, medium.com и т.п.</p>
<p>- в чатах решаем возникающие вопросы и проблемы по различным темам: <a href="https://t.me/startandroidchat" target="_blank" rel="alternate noopener noreferrer">Android</a>, <a href="https://t.me/kotlinchat" target="_blank" rel="alternate noopener noreferrer">Kotlin</a>, <a href="https://t.me/rxjavachat" target="_blank" rel="alternate noopener noreferrer">RxJava</a>, <a href="https://t.me/daggerchat" target="_blank" rel="alternate noopener noreferrer">Dagger</a>, <a href="https://t.me/androidtestingchat" target="_blank" rel="alternate noopener noreferrer">Тестирование</a> </p>
<p>- ну и если просто хочется поговорить с коллегами по разработке, то есть чат <a href="https://t.me/startandroidflood" target="_blank" rel="noopener noreferrer">Флудильня</a></p>
<p>- новый чат <a href="https://t.me/android_performance_chat" target="_blank" rel="noopener noreferrer">Performance</a> для обсуждения проблем производительности и для ваших пожеланий по содержанию курса по этой теме </p></div>
<!-- END: Modules Anywhere -->
<hr>
<br>

</div>	</section>
  
  <!-- footer -->
    <!-- //footer -->

	
	
	</article>
<!-- //Article -->


</div>
		</div>
		<!-- //MAIN CONTENT -->

		<!-- SIDEBAR LEFT -->
		<div class="t3-sidebar t3-sidebar-left col-xs-12 col-sm-4 col-sm-pull-8 col-md-3 col-md-pull-9 ">
			<div class="t3-module module " id="Mod87"><div class="module-inner"><div class="module-ct"><div class="mod-languages">
	<div class="pretext"><p><h1>Language</h1></p></div>

	<ul class="lang-inline" dir="ltr">
						<li>
			<a href="/ru/16-course/dagger2/424-urok-1.html">
												<img src="/media/mod_languages/images/ru.gif.pagespeed.ce.bzLHrnbLL7.gif" alt="Русский" title="Русский"/>										</a>
			</li>
											<li class="lang-active">
			<a href="https://startandroid.ru/en/18-courses/dagger-2/432-lesson-1-introduction.html">
												<img src="/media/mod_languages/images/xen.gif.pagespeed.ic.a_9qHVLn30.png" alt="English (UK)" title="English (UK)"/>										</a>
			</li>
				</ul>

</div>
</div></div></div>
		</div>
		<!-- //SIDEBAR LEFT -->

	</div>
</div> 


  


  


	
<!-- BACK TOP TOP BUTTON -->
<div id="back-to-top" data-spy="affix" data-offset-top="300" class="back-to-top hidden-xs hidden-sm affix-top">
  <button class="btn btn-primary" title="Back to Top"><i class="fa fa-caret-up"></i></button>
</div>
<script type="text/javascript">(function($){$('#back-to-top').on('click',function(){$("html, body").animate({scrollTop:0},500);return false;});$(window).load(function(){if((parseInt($(window).height())*2)>(parseInt($(document).height()))){$('#back-to-top').hide();}});})(jQuery);</script>
<!-- BACK TO TOP BUTTON -->

<!-- FOOTER -->
<footer id="t3-footer" class="wrap t3-footer">

	
	<section class="t3-copyright">
		<div class="container">
			<div class="row">
				<div class="col-md-8 copyright ">
					

<div class="custom">
	<p>© Start Android, 2011-2020. Все права защищены, копирование материалов возможно только с разрешения автора </p>
<!-- START: Modules Anywhere -->

<div class="custom">
	<p>При возникновении каких-либо вопросов, используйте <a href="http://startandroid.ru/ru/about/cntct5.html" target="blank">форму обратной связи</a> </p></div>
<!-- END: Modules Anywhere -->
<p> </p>
<p> </p></div>

          <small>
            <a href="http://twitter.github.io/bootstrap/" title="Bootstrap by Twitter" target="_blank">Bootstrap</a> is a front-end framework of Twitter, Inc. Code licensed under <a href="https://github.com/twbs/bootstrap/blob/master/LICENSE" title="MIT License" target="_blank">MIT License.</a>
          </small>
          <small>
            <a href="http://fortawesome.github.io/Font-Awesome/" target="_blank">Font Awesome</a> font licensed under <a href="http://scripts.sil.org/OFL">SIL OFL 1.1</a>.
          </small>
				</div>
									<div class="col-md-4 poweredby text-hide">
						<a class="t3-logo t3-logo-color" href="http://t3-framework.org" title="Powered By T3 Framework" target="_blank">Powered by <strong>T3 Framework</strong></a>
					</div>
							</div>
		</div>
	</section>

</footer>
<!-- //FOOTER -->

</div>
<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');ga('create','UA-19388196-4','auto');ga('send','pageview');</script>
</body>
</html>
