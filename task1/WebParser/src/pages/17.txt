
<!DOCTYPE html>
<html lang="ru-ru" dir="ltr" class='com_content view-article itemid-103 j39 mm-hover '>
<head>
<link href="https://www.startandroid.ru/templates/mycustomcss.css" rel="stylesheet" type="text/css">
	<base href="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html"/>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta name="keywords" content="Dagger, Component, Module, Inject"/>
	<meta name="rights" content="StartAndroid"/>
	<meta name="og:title" content="Урок 1. Введение"/>
	<meta name="og:type" content="article"/>
	<meta name="og:url" content="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html"/>
	<meta name="og:site_name" content="StartAndroid"/>
	<meta name="og:description" content="Сайт о разработке программ для Андроид (Android). Учебник, уроки для начинающих, для чайников. Как самому создать приложение для андроид. Как научиться программировать под android."/>
	<meta name="author" content="Dmitry Vinogradov"/>
	<meta name="description" content="Сайт о разработке программ для Андроид (Android). Учебник, уроки для начинающих, для чайников. Как самому создать приложение для андроид. Как научиться программировать под android."/>
	<meta name="generator" content="Joomla! - Open Source Content Management"/>
	<title>Урок 1. Введение</title>
	<link href="/ru/component/jcomments/feed/com_content/424.html" rel="alternate" type="application/rss+xml" title="Урок 1. Введение"/>
	<link href="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html" rel="alternate" hreflang="ru-RU"/>
	<link href="https://startandroid.ru/en/18-courses/dagger-2/432-lesson-1-introduction.html" rel="alternate" hreflang="en-GB"/>
	<link href="/templates/purity_iii/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon"/>
	<link href="/A.templates,,_purity_iii,,_local,,_css,,_bootstrap.css+components,,_com_jcomments,,_tpl,,_default,,_style.css,,qv==3002+plugins,,_content,,_hs_highlighter,,_lib,,_styles,,_shCore.css+plugins,,_content,,_hs_highlighter,,_lib,,_styles,,_shThemeDefault.css,Mcc.g9s2Fj-V5G.css.pagespeed.cf.C1U8Cas-X8.css" rel="stylesheet" type="text/css"/>
	
	
	
	<link href="http://www.startandroid.ru/plugins/content/jfusion/discussbot/tmpl/default/jfusion.css" rel="stylesheet" type="text/css"/>
	<link href="/A.templates,,_system,,_css,,_system.css+templates,,_purity_iii,,_local,,_css,,_template.css+templates,,_purity_iii,,_local,,_css,,_megamenu.css+templates,,_purity_iii,,_local,,_css,,_off-canvas.css+templates,,_purity_iii,,_fonts,,_font-awesome,,_css,,_font-awesome.min.css+templates,,_purity_iii,,_local,,_css,,_layouts,,_corporate.css+plugins,,_system,,_mediabox_ck,,_assets,,_mediaboxck.css+media,,_mod_languages,,_css,,_template.css,,q092552cf642fe2bdd8a0d9879112de23,Mcc.8bkeEgaG8c.css.pagespeed.cf.NQwL-2HVTk.css" rel="stylesheet" type="text/css"/>
	
	
	
	
	
	
	
	<style type="text/css">#mbCenter,#mbToolbar{background-color:#1a1a1a;-webkit-border-radius:10px;-khtml-border-radius:10px;-moz-border-radius:10px;border-radius:10px;-webkit-box-shadow:0 5px 20px rgba(0,0,0,.50);-khtml-box-shadow:0 5px 20px rgba(0,0,0,.50);-moz-box-shadow:0 5px 20px rgba(0,0,0,.50);box-shadow:0 5px 20px rgba(0,0,0,.50);-ms-filter:"progid:DXImageTransform.Microsoft.Shadow(Strength=5, Direction=180, Color='#000000')";filter: progid:DXImageTransform.Microsoft.Shadow(Strength=5, Direction=180, Color='#000000')}#mbOverlay{background-color:#000}#mbCenter.mbLoading{background-color:#1a1a1a}#mbBottom{color:#999}#mbTitle,#mbPrevLink,#mbNextLink,#mbCloseLink,#mbPlayLink,#mbPauseLink,#mbZoomMinus,#mbZoomValue,#mbZoomPlus{color:#fff}</style>
	<script type="application/json" class="joomla-script-options new">{"csrf.token":"ed37a4ab8f272e400044c1ea8adb7ccf","system.paths":{"root":"","base":""},"joomla.jtext":{"BUTTON_CANCEL":"Cancel","BUTTON_INITIATE":"Initiate Discussion","BUTTON_PUBLISH_NEW_DISCUSSION":"Publish New Discussion","BUTTON_REPUBLISH_DISCUSSION":"Republish Discussion","BUTTON_UNPUBLISH_DISCUSSION":"Unpublish Discussion","CONFIRM_THREAD_CREATION":"Initiate the discussion bot for this article? A thread will automatically be created in the forum and associated with this article.","CONFIRM_UNPUBLISH_DISCUSSION":"Do you want to unpublish this discussion? Note that this will not manipulate the forum in any way. It will simply remove the discussion from the article.","CONFIRM_PUBLISH_DISCUSSION":"This article has been previously initiated. Click 'Republish Discussion' to associate the article with the existing discussion (this can be undone by simply clicking 'Uninitiate Discussion' after initializing). Or click 'Publish New Discussion' to create a new thread and associate the article with the new discussion.","DISCUSSBOT_ERROR":"Error","HIDE_REPLIES":"Hide Replies","JYES":"Yes","SHOW_REPLIES":"Show Replies","SUBMITTING_QUICK_REPLY":"Submitting quick reply..."}}</script>
	<script src="/components/com_jcomments/js,_jcomments-v2.3.js,qv==12+libraries,_joomlatune,_ajax.js,qv==4.pagespeed.jc.F0fSeJMX30.js"></script><script>eval(mod_pagespeed_ExKfXSnKbE);</script>
	<script>eval(mod_pagespeed_$iGhiXt0BV);</script>
	<script src="/media/system/js/mootools-core.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.jm.ywlvbuicbl.js" type="text/javascript"></script>
	<script src="/media/system/js/core.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.ce.I4kCTD093I.js" type="text/javascript"></script>
	<script src="/media/system/js/mootools-more.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.jm.-6O1zP2hFm.js" type="text/javascript"></script>
	<script src="/plugins/content/hs_highlighter/lib/scripts/shCore.js+shAutoloader.js.pagespeed.jc.WXf0A72UUc.js"></script><script>eval(mod_pagespeed_su9IpL5SVr);</script>
	<script>eval(mod_pagespeed_WeiLV__hGm);</script>
	<script src="/media/jui/js/jquery.min.js,q092552cf642fe2bdd8a0d9879112de23.pagespeed.jm.Esjhv-eXHl.js" type="text/javascript"></script>
	<script src="/media,_jui,_js,_jquery-noconflict.js,q092552cf642fe2bdd8a0d9879112de23+media,_jui,_js,_jquery-migrate.min.js,q092552cf642fe2bdd8a0d9879112de23+media,_system,_js,_caption.js,q092552cf642fe2bdd8a0d9879112de23+plugins,_system,_t3,_base-bs3,_bootstrap,_js,_bootstrap.js,q092552cf642fe2bdd8a0d9879112de23+plugins,_system,_t3,_base-bs3,_js,_jquery.tap.min.js.pagespeed.jc.Ed2PAi7Y_z.js"></script><script>eval(mod_pagespeed_mx8RjjKG3V);</script>
	<script>eval(mod_pagespeed_EEHT5I5lbD);</script>
	<script src="http://www.startandroid.ru/plugins/content/jfusion/discussbot/tmpl/default/jfusion.js" type="text/javascript"></script>
	<script>eval(mod_pagespeed_UCstg9erlS);</script>
	<script>eval(mod_pagespeed_y3OBNTle2M);</script>
	<script>eval(mod_pagespeed_1XadJYvQRa);</script>
	<script src="/plugins,_system,_t3,_base-bs3,_js,_off-canvas.js+plugins,_system,_t3,_base-bs3,_js,_script.js+plugins,_system,_t3,_base-bs3,_js,_menu.js+templates,_purity_iii,_js,_script.js+plugins,_system,_t3,_base-bs3,_js,_nav-collapse.js+plugins,_system,_mediabox_ck,_assets,_mediaboxck.min.js,qver==2.4.0.pagespeed.jc.tzMQyIb0Wy.js"></script><script>eval(mod_pagespeed_r6BAo9HvrJ);</script>
	<script>eval(mod_pagespeed_$6DR3H2ba0);</script>
	<script>eval(mod_pagespeed_oaBYG6qGe9);</script>
	<script>eval(mod_pagespeed_AmCkxaCr$c);</script>
	<script>eval(mod_pagespeed_ZlfQYd6O1_);</script>
	<script>eval(mod_pagespeed_rDcvdPCnuH);</script>
	<script type="text/javascript">window.addEvent('load',function(){var siteurl='https://startandroid.ru/';function path(){var args=arguments,result=[];for(var i=0;i<args.length;i++){result.push(args[i].replace('@',[siteurl,'plugins/content/hs_highlighter/lib/scripts/'].join('')));}return result;};SyntaxHighlighter.autoloader.apply(null,path('applescript            @shBrushAppleScript.js','actionscript3 as3      @shBrushAS3.js','bash shell             @shBrushBash.js','coldfusion cf          @shBrushColdFusion.js','cpp c                  @shBrushCpp.js','c# c-sharp csharp      @shBrushCSharp.js','css                    @shBrushCss.js','delphi pascal          @shBrushDelphi.js','diff patch pas         @shBrushDiff.js','erl erlang             @shBrushErlang.js','groovy                 @shBrushGroovy.js','java                   @shBrushJava.js','jfx javafx             @shBrushJavaFX.js','js jscript javascript  @shBrushJScript.js','perl pl                @shBrushPerl.js','php                    @shBrushPhp.js','text plain             @shBrushPlain.js','py python              @shBrushPython.js','ruby rails ror rb      @shBrushRuby.js','sass scss              @shBrushSass.js','scala                  @shBrushScala.js','sql                    @shBrushSql.js','vb vbnet               @shBrushVb.js','xml xhtml xslt html    @shBrushXml.js'));SyntaxHighlighter.defaults['auto-links']=false;SyntaxHighlighter.defaults['toolbar']=false;;SyntaxHighlighter.all();});JFusion.view='article';JFusion.enablePagination=1;JFusion.enableJumpto=0;JFusion.articelUrl[424]='/ru/16-course/dagger2/424-urok-1.html';jQuery(window).on('load',function(){new JCaption('img.caption');});jQuery(function($){initTooltips();$("body").on("subform-row-add",initTooltips);function initTooltips(event,container){container=container||document;$(container).find(".hasTooltip").tooltip({"html":true,"container":"body"});}});Mediabox.scanPage=function(){var links=jQuery('a').filter(function(i){if(jQuery(this).attr('rel')&&jQuery(this).data('mediaboxck_done')!='1'){var patt=new RegExp(/^lightbox/i);return patt.test(jQuery(this).attr('rel'));}});if(!links.length)return false;new Mediaboxck(links,{overlayOpacity:0.7,resizeOpening:1,resizeDuration:240,initialWidth:320,initialHeight:180,fullWidth:'0',defaultWidth:'640',defaultHeight:'360',showCaption:1,showCounter:1,loop:0,isMobileEnable:1,isMobile:false,mobileResolution:'640',attribType:'rel',showToolbar:'0',diapoTime:'3000',diapoAutoplay:'0',toolbarSize:'normal',medialoop:false,showZoom:0,counterText:'({x} of {y})',playerpath:'/plugins/system/mediabox_ck/assets/NonverBlaster.swf'},null,function(curlink,el){var rel0=curlink.rel.replace(/[[]|]/gi," ");var relsize=rel0.split(" ");return(curlink==el)||((curlink.rel.length>8)&&el.rel.match(relsize[1]));});};jQuery(document).ready(function(){Mediabox.scanPage();});</script>
	<link href="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html" rel="alternate" hreflang="x-default"/>

	
<!-- META FOR IOS & HANDHELD -->
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
	<style type="text/stylesheet">@-webkit-viewport   { width: device-width; }@-moz-viewport      { width: device-width; }@-ms-viewport       { width: device-width; }@-o-viewport        { width: device-width; }@viewport           { width: device-width; }</style>
	<script type="text/javascript">if(navigator.userAgent.match(/IEMobile\/10\.0/)){var msViewportStyle=document.createElement("style");msViewportStyle.appendChild(document.createTextNode("@-ms-viewport{width:auto!important}"));document.getElementsByTagName("head")[0].appendChild(msViewportStyle);}</script>
<meta name="HandheldFriendly" content="true"/>
<meta name="apple-mobile-web-app-capable" content="YES"/>
<!-- //META FOR IOS & HANDHELD -->




<!-- Le HTML5 shim and media query for IE8 support -->
<!--[if lt IE 9]>
<script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
<script type="text/javascript" src="/plugins/system/t3/base-bs3/js/respond.min.js"></script>
<![endif]-->

<!-- You can add Google Analytics here or use T3 Injection feature -->

<!--[if lt IE 9]>
<link rel="stylesheet" href="/templates/purity_iii/css/ie8.css" type="text/css" />
<![endif]-->
	</head>

<body>

<div class="t3-wrapper corporate"> <!-- Need this wrapper for off-canvas menu. Remove if you don't use of-canvas -->

	
<!-- MAIN NAVIGATION -->
<header id="t3-mainnav" class="wrap navbar navbar-default navbar-fixed-top t3-mainnav">

	<!-- OFF-CANVAS -->
			
<button class="btn btn-default off-canvas-toggle " type="button" data-pos="left" data-nav="#t3-off-canvas" data-effect="off-canvas-effect-4">
  <i class="fa fa-bars"></i>
</button>

<!-- OFF-CANVAS SIDEBAR -->
<div id="t3-off-canvas" class="t3-off-canvas ">

  <div class="t3-off-canvas-header">
    <h2 class="t3-off-canvas-header-title">Sidebar</h2>
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
  </div>

  <div class="t3-off-canvas-body">
    <div class="t3-module module " id="Mod97"><div class="module-inner"><h3 class="module-title "><span>Самое читаемое</span></h3><div class="module-ct"><ul class="mostread mod-list">
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/12-urok-3-sozdanie-avd-pervoe-prilozhenie-struktura-android-proekta.html" itemprop="url">
			<span itemprop="name">
				Урок 3. Создание AVD. Первое приложение. Структура Android-проекта.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/9-urok-2-ustanovka-i-nastrojka-sredy-razrabotki.html" itemprop="url">
			<span itemprop="name">
				Урок 2. Установка Android Studio			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/13-urok-4-elementy-ekrana-i-ih-svojstva.html" itemprop="url">
			<span itemprop="name">
				Урок 4. Компоненты экрана и их свойства			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/14-urok-5-layout-kak-ispolzovat-smena-orientatsii-ekrana.html" itemprop="url">
			<span itemprop="name">
				Урок 5. Layout-файл в Activity. XML представление. Смена ориентации экрана.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/4-urok-1-vvedenie.html" itemprop="url">
			<span itemprop="name">
				Урок 1. Введение.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/16-urok-9-obrabotchiki-sobytij-na-primere-button.html" itemprop="url">
			<span itemprop="name">
				Урок 9. Обработчики событий на примере Button.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/15-urok-6-vidy-layouts-kljuchevye-otlichija-i-svojstva.html" itemprop="url">
			<span itemprop="name">
				Урок 6. Виды Layouts. Ключевые отличия и свойства.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/38-urok-7-layout-parametry-dlja-view-elementov.html" itemprop="url">
			<span itemprop="name">
				Урок 7. Layout параметры для View-элементов.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/74-urok-34-hranenie-dannyh-sqlite.html" itemprop="url">
			<span itemprop="name">
				Урок 34. Хранение данных. SQLite			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/82-urok42-spisok-listview.html" itemprop="url">
			<span itemprop="name">
				Урок 42. Список - ListView			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/58-urok-21-sozdanie-i-vyzov-activity.html" itemprop="url">
			<span itemprop="name">
				Урок 21. Создание и вызов Activity			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/24-urok-8-rabotaem-s-elementami-ekrana-iz-koda.html" itemprop="url">
			<span itemprop="name">
				Урок 8. Работаем с элементами экрана из кода			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/73-urok-33-hranenie-dannyh-preferences.html" itemprop="url">
			<span itemprop="name">
				Урок 33. Хранение данных. Preferences.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/80-urok-40-layoutinflater-uchimsja-ispolzovat.html" itemprop="url">
			<span itemprop="name">
				Урок 40. LayoutInflater. Учимся использовать.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/489-urok-180-constraintlayout-osnovy.html" itemprop="url">
			<span itemprop="name">
				Урок 180. ConstraintLayout. Основы			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/175-urok-105-android-3-fragments-dinamicheskaja-rabota.html" itemprop="url">
			<span itemprop="name">
				Урок 105. Android 3. Fragments. Динамическая работа			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/17-urok-10-optimiziruem-realizatsiju-obrabotchikov.html" itemprop="url">
			<span itemprop="name">
				Урок 10. Оптимизируем реализацию обработчиков.			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/157-urok-92-service-prostoj-primer.html" itemprop="url">
			<span itemprop="name">
				Урок 92. Service. Простой пример			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/54-urok-19-pishem-prostoj-kalkuljator.html" itemprop="url">
			<span itemprop="name">
				Урок 19. Пишем простой калькулятор			</span>
		</a>
	</li>
	<li itemscope itemtype="https://schema.org/Article">
		<a href="/ru/uroki/vse-uroki-spiskom/67-urok-28-extras-peredaem-dannye-s-pomoschju-intent.html" itemprop="url">
			<span itemprop="name">
				Урок 28. Extras - передаем данные с помощью Intent			</span>
		</a>
	</li>
</ul>
</div></div></div>
  </div>

</div>
<!-- //OFF-CANVAS SIDEBAR -->

		<!-- //OFF-CANVAS -->

	<div class="container">

		<!-- NAVBAR HEADER -->
		<div class="navbar-header">

			<!-- LOGO -->
			<div class="logo logo-text">
				<div class="logo-text">
					<a href="/" title="StartAndroid">
						
												
						<span>StartAndroid</span>
					</a>
				</div>
			</div>
			<!-- //LOGO -->

											<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".t3-navbar-collapse">
					<i class="fa fa-bars"></i>
				</button>
			
	    	    <!-- HEAD SEARCH -->
	    <div class="head-search">     
	      <form class="form-search" action="/ru/" method="post">
	<div class="search">
		<label for="mod-search-searchword">Поиск</label><i class="fa fa-search"></i><input name="searchword" id="mod-search-searchword" maxlength="200" class="form-control " type="text" size="0"/>	<input type="hidden" name="task" value="search"/>
	<input type="hidden" name="option" value="com_search"/>
	<input type="hidden" name="Itemid" value="103"/>
	</div>
</form>

	    </div>
	    <!-- //HEAD SEARCH -->
	    
		</div>
		<!-- //NAVBAR HEADER -->

		<!-- NAVBAR MAIN -->
				<nav class="t3-navbar-collapse navbar-collapse collapse"></nav>
		
		<nav class="t3-navbar navbar-collapse collapse">
			<div class="t3-megamenu animate elastic" data-duration="400" data-responsive="true">
<ul itemscope itemtype="http://www.schema.org/SiteNavigationElement" class="nav navbar-nav level0">
<li itemprop='name' class="current active" data-id="103" data-level="1">
<a itemprop='url' class="" href="/ru/" data-target="#">Главная </a>

</li>
<li itemprop='name' data-id="124" data-level="1">
<a itemprop='url' class="" href="/ru/novosti.html" data-target="#">Новости </a>

</li>
<li itemprop='name' class="dropdown mega" data-id="104" data-level="1">
<a itemprop='url' class=" dropdown-toggle" href="/ru/uroki.html" data-target="#" data-toggle="dropdown">Уроки <em class="caret"></em></a>

<div class="nav-child dropdown-menu mega-dropdown-menu"><div class="mega-dropdown-inner">
<div class="row">
<div class="col-xs-12 mega-col-nav" data-width="12"><div class="mega-inner">
<ul itemscope itemtype="http://www.schema.org/SiteNavigationElement" class="mega-nav level1">
<li itemprop='name' data-id="110" data-level="2">
<a itemprop='url' class="" href="/ru/uroki/vse-uroki-spiskom.html" data-target="#">Полный список </a>

</li>
<li itemprop='name' data-id="123" data-level="2">
<a itemprop='url' class="" href="/ru/uroki/100-pdf.html" target="_blank" data-target="#">Первые 100 уроков в PDF </a>

</li>
</ul>
</div></div>
</div>
</div></div>
</li>
<li itemprop='name' data-id="167" data-level="1">
<a itemprop='url' class="" href="/ru/blog.html" data-target="#">Блог </a>

</li>
<li itemprop='name' class="dropdown mega" data-id="131" data-level="1">
<a itemprop='url' class="customlight-background dropdown-toggle" href="#" data-target="#" data-toggle="dropdown">🆕Курсы<em class="caret"></em></a>

<div class="nav-child dropdown-menu mega-dropdown-menu"><div class="mega-dropdown-inner">
<div class="row">
<div class="col-xs-12 mega-col-nav" data-width="12"><div class="mega-inner">
<ul itemscope itemtype="http://www.schema.org/SiteNavigationElement" class="mega-nav level1">
<li itemprop='name' data-id="211" data-level="2">
<a itemprop='url' class="" href="/ru/courses/vse-kursy.html" data-target="#">🆕 Все курсы </a>

</li>
<li itemprop='name' data-id="132" data-level="2">
<a itemprop='url' class="" href="/ru/courses/dagger-2.html" data-target="#">Dagger 2 </a>

</li>
<li itemprop='name' data-id="138" data-level="2">
<a itemprop='url' class="" href="/ru/courses/rxjava.html" data-target="#">RxJava </a>

</li>
<li itemprop='name' data-id="185" data-level="2">
<a itemprop='url' class="" href="/ru/courses/testing.html" data-target="#">Тестирование </a>

</li>
<li itemprop='name' data-id="187" data-level="2">
<a itemprop='url' class="" href="/ru/courses/architecture-components.html" data-target="#">Architecture Components </a>

</li>
<li itemprop='name' data-id="194" data-level="2">
<a itemprop='url' class="" href="/ru/courses/performance.html" data-target="#">Производительность </a>

</li>
<li itemprop='name' data-id="223" data-level="2">
<a itemprop='url' class="" href="/ru/courses/kotlin.html" data-target="#">Kotlin </a>

</li>
</ul>
</div></div>
</div>
</div></div>
</li>
<li itemprop='name' class="dropdown mega" data-id="107" data-level="1">
<a itemprop='url' class=" dropdown-toggle" href="#" data-target="#" data-toggle="dropdown">Инфо<em class="caret"></em></a>

<div class="nav-child dropdown-menu mega-dropdown-menu"><div class="mega-dropdown-inner">
<div class="row">
<div class="col-xs-12 mega-col-nav" data-width="12"><div class="mega-inner">
<ul itemscope itemtype="http://www.schema.org/SiteNavigationElement" class="mega-nav level1">
<li itemprop='name' data-id="160" data-level="2">
<a itemprop='url' class="" href="/ru/about/cntct5.html" data-target="#">Вопрос </a>

</li>
<li itemprop='name' data-id="108" data-level="2">
<a itemprop='url' class="" href="/ru/about/osajte.html" data-target="#">О сайте </a>

</li>
<li itemprop='name' data-id="109" data-level="2">
<a itemprop='url' class="" href="/ru/about/ob-avtore.html" data-target="#">Об авторе </a>

</li>
<li itemprop='name' data-id="224" data-level="2">
<a itemprop='url' class="" href="/ru/about/reklama.html" data-target="#">Реклама </a>

</li>
</ul>
</div></div>
</div>
</div></div>
</li>
<li itemprop='name' data-id="184" data-level="1">
<a itemprop='url' class="" href="/ru/chats.html" data-target="#">Чаты </a>

</li>
<li itemprop='name' data-id="126" data-level="1">
<a itemprop='url' class="" href="/ru/login.html" data-target="#">Войти </a>

</li>
</ul>
</div>

		</nav>
    <!-- //NAVBAR MAIN -->

	</div>
</header>
<!-- //MAIN NAVIGATION -->






  


  


	
<div id="t3-mainbody" class="container t3-mainbody">
	<div class="row">

		<!-- MAIN CONTENT -->
		<div id="t3-content" class="t3-content col-xs-12 col-sm-8 col-sm-push-4 col-md-9 col-md-push-3">
						

<div class="item-page clearfix">


<!-- Article -->
<article>
	<meta itemprop="inLanguage" content="ru-RU"/>
	<meta itemprop="url" content="/ru/16-course/dagger2/424-urok-1.html"/>

    
    
  <!-- Aside -->
    <!-- //Aside -->

  
  
  
	
  
	
	<section class="article-content clearfix">
		<p>В этом уроке я подробно расскажу о Dagger и его возможностях. Мы разберем, что такое Component и Module, подключим Dagger к проекту, и сделаем несколько простых примеров </p>
 
<!-- START: Modules Anywhere --><!--  Modules Anywhere Message: Этот модуль не может быть помещен сюда, потому, что он не опубликован или не привязан к этой странице. --> <!-- END: Modules Anywhere -->
<p> </p>
<h1>Зачем нужен Dagger</h1>
<p>Если вы хотите снизить зависимость объектов друг от друга и упростить написание тестов для вашего кода, то вам подойдет паттерн <strong>Dependency Injection</strong>. А <strong>Dagger</strong> - это библиотека, которая поможет в реализации этого паттерна. В этом мини-курсе я опишу использование библиотеки Dagger версии 2 (далее по тексту даггер).</p>
<p>Плюсы даггера в сравнении с другими библиотеками: <br/>- генерирует код несложный для понимания и отладки<br/>- проверяет зависимости на этапе компиляции<br/>- не создает проблем при использовании proguard</p>
<p> </p>
<p>Сразу скажу, что тема нетривиальная и у вас могут возникать вопросы типа "<em>а что будет, если сделать так?</em>". Все случаи я рассмотреть не могу, поэтому очень рекомендую вам создавать примеры и на них проверять как все это работает в том или ином случае. Мне практика очень сильно помогла лучше понять теорию.</p>
<p> </p>
<p>Чтобы понять, зачем нам может понадобиться Dependency Injection и даггер, давайте рассмотрим небольшой абстрактный пример, в котором смоделируем ситуацию, когда создание одного объекта может повлечь за собой создание еще нескольких.</p>
<p>Пусть в нашем приложении есть некая MainActivity и, в соответствии с паттерном MVP, для нее есть презентер. Презентеру для работы нужны будут некие ItemController и DataController. Т.е. нам надо будет создать два этих объекта перед тем, как создать презентер. Но для создания двух этих объектов нам, в свою очередь, нужны объекты ApiService и SharedPreferences. А для создания ApiService нужны RestAdapter, RestAdapter.Builder, OkHttpClient и Cache.</p>
<p>В обычной реализации это может выглядеть так:</p>
<pre class="brush:java">public class MainActivity extends Activity {

    MainActivityPresenter activityPresenter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        File cacheDirectory = new File("some path");
        Cache cache = new HttpResponseCache(cacheDirectory, 50 * 1024 * 1024);

        OkHttpClient httpClient = new OkHttpClient();
        httpClient.setCache(cache);

        RestAdapter.Builder builder = new RestAdapter.Builder();
        builder.setClient(new OkClient(httpClient));
        RestAdapter restAdapter = builder.build();
        ApiService apiService = restAdapter.create(ApiService.class);

        ItemController itemController = new ItemController(apiService);

        SharedPreferences preference = getSharedPreferences("item_prefs", MODE_PRIVATE);
        DataController dataController = new DataController(preference);

        activityPresenter = new MainActivityPresenter(this, itemController, dataController);
    }

}</pre>
<p>В MainActivity мы создаем кучу объектов, чтобы по итогу получить один презентер. Нам в этом примере не важно, какие именно объекты создаются. Главное - это сколько кода может потребоваться написать в MainActivity, чтобы получить результат.</p>
<p> </p>
<p>Если мы применим паттерн Dependency Injection и используем даггер, то код в Activity будет выглядеть так:</p>
<pre class="brush:java">public class MainActivity extends Activity {

    MainActivityPresenter activityPresenter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        activityPresenter = App.getComponent().getPresenter();
    }
}</pre>
<p>Разумеется, код создания объектов никуда не исчез. Но он вынесен из Activity в отдельные классы, к которым даггер имеет доступ. В итоге мы просто вызываем метод getPresenter чтобы получить объект MainActivityPresenter. А даггер уже сам создаст этот объект и всю необходимую для него иерархию объектов.</p>
<p>То же самое мы могли бы сделать и без даггера, простым переносом кода создания объектов в метод типа MainActivityPresenter.createInstance(). Но если у нас есть другой presenter, которому частично нужны те же объекты, в его методе createInstance нам придется дублировать код создания некоторых объектов.</p>
<p>При использовании даггера, код создания необходимого нам объекта будет существовать только в одном месте и в одном экземпляре, и даггер использует этот код везде, где потребуется создать объект.</p>
<p> </p>
<h1>Теория</h1>
<p>Теперь давайте смотреть, как работает даггер изнутри. </p>
<p>Возьмем все тот же пример с Activity и Presenter. Т.е. когда Activity для своих нужд создает объект Presenter. Обычая схема создания будет выглядеть так:</p>
<p>Activity &gt; Presenter</p>
<p>Т.е. Activity создает Presenter самостоятельно</p>
<p> </p>
<p>При использовании даггера схема будет выглядеть так:</p>
<p>Activity -&gt; Component -&gt; Module -&gt; Presenter</p>
<p>Activity обращается к компоненту, компонент с помощью модулей создает Presenter и возвращает его в Activity.</p>
<p> </p>
<p>Модули и компоненты - это два ключевых понятия даггера.</p>
<p> </p>
<p><strong>Модули</strong> - это просто классы, куда мы помещаем код создания объектов. И обычно каждый модуль включает в себя объекты близкие по смыслу. Например:</p>
<p>Модуль ItemModule будет содержать в себе код создания объектов, связанных с пользователями, т.е. что-нибудь типа Item и ItemController.</p>
<p>Модуль NetworkModule - объекты OkHttpClient и ApiService.</p>
<p>Модуль StorageModule - объекты DataController и SharedPreferences</p>
<p> </p>
<p><strong>Компонент</strong> - это посредник между Activity и модулем. Когда Activity нужен какой-либо объект, она сообщает об этом компоненту. Компонент знает, какой модуль умеет создавать такой объект, просит модуль создать объект и передает его в Activity. При этом компонент может использовать другие модули, чтобы создать всю иерархию объектов, необходимую для создания искомого объекта.</p>
<p> </p>
<p>Процесс работы даггера можно сравнить с обедом в McDonalds. Т.е. по аналогии со схемой даггера:</p>
<p>Activity -&gt; Component -&gt; Module -&gt; Presenter</p>
<p>схема McDonalds выглядит так:</p>
<p>Клиент -&gt; Кассир -&gt; Производственная линия -&gt; Заказ (Бигмак/Картошка/Кола) </p>
<p> </p>
<p>Рассмотрим подробнее шаги этих схем:</p>
<table style="margin-left: auto; margin-right: auto;" border="2">
<tbody>
<tr style="height: 15px;">
<td style="text-align: center; width: 425px; height: 15px;"><strong>McDonalds</strong></td>
<td style="text-align: center; width: 433px; height: 15px;"><strong>Даггер</strong></td>
</tr>
<tr style="height: 30px;">
<td style="width: 425px; text-align: center; height: 30px;">Клиент определился, что его заказ будет состоять из бигмака, картошки и колы, и он говорит об этом кассиру</td>
<td style="width: 433px; text-align: center; height: 30px;">Activity сообщает компоненту, что ему понадобится Presenter</td>
</tr>
<tr style="height: 30px;">
<td style="width: 425px; text-align: center; height: 30px;">Кассир ходит по производственной линии и собирает заказ: берет бигмак, наливает колу, насыпает картошку</td>
<td style="width: 433px; text-align: center; height: 30px;">Компонент использует модули, чтобы создать все необходимые объекты, которые понадобятся для создания Presenter</td>
</tr>
<tr style="height: 13.3438px;">
<td style="width: 425px; text-align: center; height: 13.3438px;">Кассир комплектует заказ в пакет или на поднос и выдает его клиенту</td>
<td style="width: 433px; text-align: center; height: 13.3438px;">Компонент в итоге получает от модулей требуемый объект Presenter и отдает его Activity</td>
</tr>
</tbody>
</table>
<p> </p>
<p> </p>
<h1>Практика</h1>
<p>Теперь на простом примере посмотрим, как создавать модули и компоненты, и как с их помощью Activity будет получать требуемые объекты. </p>
<p> </p>
<h2>Подключение даггера к проекту</h2>
<p>Создайте новый проект. Чтобы использовать даггер, добавьте в раздел dependencies файла build.gradle вашего модуля:</p>
<pre class="brush:groovy">    compile 'com.google.dagger:dagger:2.7'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
</pre>
<p> </p>
<p>Если не работает, то удалите.</p>
<p>И попробуйте добавить в конец файла build.gradle вашего модуля строки:</p>
<pre class="brush:groovy">// Add plugin https://bitbucket.org/hvisser/android-apt
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

// Apply plugin
apply plugin: 'com.neenbedankt.android-apt'

// Add Dagger dependencies
dependencies {
    compile 'com.google.dagger:dagger:2.7'
    apt 'com.google.dagger:dagger-compiler:2.7'
}</pre>
<p> </p>
<p> </p>
<p>Если вдруг у вас что-то не работает, то воспользуйтесь этим <a href="https://github.com/startandroid/Dagger2_FirstProject" rel="alternate">готовым рабочим проектом</a>.</p>
<p> </p>
<p>В качестве объектов, которые мы будем запрашивать от даггера, используем пару классов: DatabaseHelper и NetworkUtils.</p>
<pre class="brush:java">public class DatabaseHelper {
  
}</pre>
<p> </p>
<pre class="brush:java">public class NetworkUtils {

}</pre>
<p>Их реализация нам сейчас не важна, оставляем их пустыми.</p>
<p> </p>
<p>Предположим, что эти объекты будут нужны нам в MainActivity.</p>
<pre class="brush:java">public class MainActivity extends Activity {

    DatabaseHelper databaseHelper;
    NetworkUtils networkUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}</pre>
<p>Чтобы получить их с помощью даггера, нам нужно создать модули и компонент.</p>
<p>Создаем модули, которые будут уметь предоставлять требуемые объекты. Именно в модулях мы и пишем весь код по созданию объектов. Это обычные классы, но с парой аннотаций:</p>
<pre class="brush:java">@Module
public class NetworkModule {

    @Provides
    NetworkUtils provideNetworkUtils() {
        return new NetworkUtils();
    }

}</pre>
<p> </p>
<pre class="brush:java">@Module
public class StorageModule {

    @Provides
    DatabaseHelper provideDatabaseHelper() {
        return new DatabaseHelper();
    }

}</pre>
<p>Аннотацией <strong>@Module</strong> мы сообщаем даггеру, что этот класс является модулем. А аннотация <strong>@Provides</strong> указывает, что метод является поставщиком объекта и компонент может использовать его, чтобы получить объект.<br/>Технически можно было вполне обойтись и одним модулем. Но логичнее будет разделить объекты на модули по их смыслу и области применения.<br/>Модули готовы, теперь создаем компонент. Для этого нам необходимо создать интерфейс</p>
<pre class="brush:java">@Component()
public interface AppComponent {

}</pre>
<p>Данный интерфейс описывает пустой компонент, который пока ничего не будет уметь. При компиляции проекта, даггер найдет этот интерфейс по аннотации <strong>@Component</strong> и сгенерирует класс DaggerAppComponent (имя класса = слово Dagger + имя интерфейса), которые реализует этот интерфейс. Это и будет класс компонента.</p>
<p>Все что от нас требуется - наполнить интерфейс методами. Этим мы дадим понять компоненту, какие объекты он должен уметь нам возвращать. А при сборе проекта даггер уже сам их реализует в сгенерированном классе компонента.</p>
<p>Компонент может возвращать нам объекты двумя способами. Первый - это обычные <strong>get-методы</strong>. Т.е. мы просто вызываем метод, который вернет нам объект. Второй способ интереснее, это <strong>inject-методы</strong>. В этом случае мы передаем компоненту экземпляр Activity, и компонент сам заполняет там все необходимые поля, создавая необходимые объекты.</p>
<p>Рассмотрим оба способа на примерах.</p>
<p> </p>
<h2>Get методы</h2>
<p>Дополним интерфейс, чтобы компонент научился создавать для нас объекты.</p>
<pre class="brush:java">@Component(modules = {StorageModule.class, NetworkModule.class})
public interface AppComponent {
    NetworkUtils getNetworkUtils();
    DatabaseHelper getDatabaseHelper();
}</pre>
<p>Список modules - это модули, в которых компонент сможет искать код создания объектов.</p>
<p>Методы могут быть с любым именем, главное - это их возвращаемые типы (NetworkUtils и DatabaseHelper). Они дают понять компоненту, какие именно объекты мы захотим от него получить. При компиляции, даггер проверит, в каком модуле какой объект можно достать и нагенерит в реализации двух этих методов соответствующий код создания этих объектов. А в MainActivity мы просто вызовем эти методы компонента, чтобы получить готовые объекты.</p>
<p> </p>
<p>Осталось где-то описать создание экземпляра компонента. Используем для этого Application класс. Не забудьте добавить его в манифест</p>
<pre class="brush:java">public class App extends Application {

    private static AppComponent component;

    @Override
    public void onCreate() {
        super.onCreate();
        component = DaggerAppComponent.create();
    }

    public static AppComponent getComponent() {
        return component;
    }

}</pre>
<p>В методе onCreate создаем компонент. На этом месте ваша среда разработки скорее всего будет ругаться на класс DaggerAppComponent. Так происходит, потому что класса DaggerAppComponent пока не существует. Мы только описали интерфейс компонента AppComponent, но нам надо скомпилировать проект, чтобы даггер создал этот класс-компонент.</p>
<p>Скомпилируйте проект. В Android Studio это можно сделать через меню Build -&gt; Make Project (CTRL+F9). После того, как процесс завершится, класс DaggerAppComponent будет создан в недрах папки build\generated\. Студия теперь знает этот класс и должна предлагать добавить его в import, чтобы в коде не было никаких ошибок.</p>
<p><br/>Теперь в MainActivity мы можем использовать этот компонент, чтобы получить готовые объекты DatabaseHelper и NetworkUtils:</p>
<pre class="brush:java">public class MainActivity extends Activity {

    DatabaseHelper databaseHelper;
    NetworkUtils networkUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        databaseHelper = App.getComponent().getDatabaseHelper();
        networkUtils = App.getComponent().getNetworkUtils();
    }
}</pre>
<p>При запуске приложения объекты будут созданы даггером. Если у вас крэшит с NPE, убедитесь, что добавили App класс в манифест.</p>
<p> </p>
<h2>Inject-методы</h2>
<p>У нас в MainActivity сейчас всего два объекта, которые мы получаем от компонента. Но если будет штук 20, то придется в интерфейсе компонента описать 20 get-методов и в коде MainActivity написать 20 вызовов этих методов. У даггера есть более удобное решение для таких случаев. Мы можем научить компонент не просто возвращать объекты, а самому наполнять Activity требуемыми объектами. Т.е. мы даем компоненту экземпляр MainActivity, а он смотрит, какие объекты нужны, создает их и сам помещает в соответствующие поля.</p>
<p><br/>Перепишем интерфейс компонента</p>
<pre class="brush:java">@Component(modules = {StorageModule.class, NetworkModule.class})
public interface AppComponent {
    void injectsMainActivity(MainActivity mainActivity);
}</pre>
<p>Вместо пары get-методов мы описываем один inject-метод. Имя может быть любым, главное - это тип его единственного параметра. Мы указываем здесь MainActivity. Тем самым, мы говорим компоненту, что когда мы будем вызывать этот метод и передавать туда экземпляр MainActivity, мы ожидаем, что компонент наполнит этот экземпляр требуемыми объектами.</p>
<p>При компиляции проекта, даггер увидит этот метод в интерфейсе, просмотрит класс MainActivity на наличие (помеченных специальными аннотациями) полей и определит, какие объекты ему нужно будет создавать. В итоге, в классе компонента даггер реализует метод injectsMainActivity так, чтобы он получал объекты из своих модулей и подставлял их в соответствующие переменные переданного ему экземпляра MainActivity.</p>
<p>Перепишем MainActivity</p>
<pre class="brush:java">public class MainActivity extends Activity {

    @Inject
    DatabaseHelper databaseHelper;

    @Inject
    NetworkUtils networkUtils;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        App.getComponent().injectsMainActivity(this);
    }
    
}</pre>
<p>Аннотациями @Inject мы помечаем поля, которые компонент должен заполнить. При вызове метода injectsMainActivity компонент вытащит из модулей объекты DatabaseHelper и NetworkUtils и поместит их в поля MainActivity</p>
<p> </p>
<p>Этот механизм можно посмотреть в коде класса компонента, который был сгенерирован даггером. Метод injectsMainActivity:</p>
<pre class="brush:java">    public void injectsMainActivity(MainActivity mainActivity) {
        mainActivityMembersInjector.injectMembers(mainActivity);
    }</pre>
<p> </p>
<p>Если пойти дальше и посмотреть внутрь mainActivityMembersInjector.injectMembers, увидим следующее:</p>
<pre class="brush:java">    @Override
    public void injectMembers(MainActivity instance) {
        if (instance == null) {
            throw new NullPointerException("Cannot inject members into a null reference");
        }
        instance.databaseHelper = databaseHelperProvider.get();
        instance.networkUtils = networkUtilsProvider.get();
    }</pre>
<p>Здесь просто проверка на null и присвоение объектов в поля MainActivity.</p>
<p> </p>
<p>Разумеется, get-методы и inject-методы могут быть использованы вместе в одном компоненте. Я описывал их отдельно друг от друга только для простоты понимания.</p>
<p> </p>
<h2>Граф зависимостей</h2>
<p>Совокупность всех объектов, которые умеет создавать компонент, называется граф объектов компонента, или граф зависимостей компонента. Т.е. в примере выше этот граф состоит всего из двух объектов: DatabaseHelper и NetworkUtils. Компонент знает как создать эти объекты и может их предоставить. </p>
<p>В некоторых случаях при создании одного объекта, компоненту может потребоваться другой объект. Мы говорили об этом в самом начале этого урока. Когда для создания презентера нам понадобилось создать еще с десяток объектов.</p>
<p>Рассмотрим пример модуля</p>
<pre class="brush:java">@Module
public class NetworkModule {

    @Provides NetworkUtils provideNetworkUtils(HttpClient httpClient) {
        return new NetworkUtils(httpClient);
    }

    @Provides HttpClient provideHttpClient() {
        return new HttpClient();
    }

}</pre>
<p>Когда мы от компонента попросим объект NetworkUtils, компонент придет в этот модуль и вызовет метод provideNetworkUtils. Но на вход этому методу требуется объект HttpClient. Компонент ищет, какой из его модулей умеет создавать такой объект и находит его в этом же модуле. Он вызывает метод provideHttpClient, получает объект HttpClient и использует его при вызове provideNetworkUtils. Т.е. если ваш объект требует для создания другие объекты, то вам необходимо в модулях описать создание всех этих объектов. В этом случае компонент создаст всю цепочку и получит искомый объект. </p>
<p>Бывают случаи, когда не все можно так просто создать в модулях и нужны какие-то объекты извне даггера. Этот случай я опишу в одном из следующих уроков.</p>
<p> </p>
<h2>Выявление ошибок</h2>
<p>К плюсам даггера относят то, что если у вас есть какая-то ошибка в построении зависимостей, то вы узнаете об этом не в Runtime, а на этапе компиляции. Давайте проверим. Создадим еще один пустой класс Preferences.</p>
<pre class="brush:java">public class Preferences {
    
}</pre>
<p> </p>
<p>И добавим в MainActivity переменную этого типа с аннотацией Inject:</p>
<pre class="brush:java">@Inject
Preferences preferences; </pre>
<p>Теперь компонент при инджекте должен создать объект Preferences, но мы не добавили создание этого объекта в модули. И компонент просто не знает откуда его взять. </p>
<p>Пытаемся скомпилировать. И получаем ошибку:<br/><em>Error:(24, 10) error: Preferences cannot be provided without an @Inject constructor or from an @Provides- or @Produces-annotated method.</em></p>
<p>Компилятор вполне закономерно жалуется, что не знает, откуда компоненту взять объект Preferences.</p>
<p> </p>
<h2>Что дальше?</h2>
<p>В этом уроке я рассказал самые основы даггера без особых подробностей и сложностей. Прочитав его, вы сможете понять общий принцип работы и роли компонента и модулей. В следующих уроках я расскажу о дополнительных возможностях, которые предоставляет даггер при создании объектов. Мы рассмотрим пример, как могут быть организованы компоненты в небольшом приложении. А также, мы изучим возможность компонента создавать объекты в отдельном потоке.</p>
<p> </p>
<p style="text-align: center;"><a class="myCustomCssButton" href="/ru/courses/dagger-2.html" rel="alternate">Курс Dagger 2</a></p>
<p> </p>	</section>
  
  <!-- footer -->
    <!-- //footer -->

	
	
	</article>
<!-- //Article -->


<script type="text/javascript">var jcomments=new JComments(424,'com_content','/ru/component/jcomments/');jcomments.setList('comments-list');</script>
<div id="jc">
<div id="comments"><h4>Комментарии <a class="rss" href="/ru/component/jcomments/feed/com_content/424.html" title="RSS лента комментариев этой записи" target="_blank">&nbsp;</a><a class="refresh" href="#" title="Обновить список комментариев" onclick="jcomments.showPage(424,'com_content',0);return false;">&nbsp;</a></h4>
<div class="comments-list" id="comments-list-0">
		<div class="even" id="comment-item-30">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-30" id="comment-30">#</a>
<span class="comment-title">RE: Урок 1. Введение</span> &mdash; 
<span class="comment-author">Ольга</span>
<span class="comment-date">20.05.2017 18:10</span>
<div class="comment-body" id="comment-body-30">Очень забавная аналогия с Макдональдсом)</div>
</div><div class="clear"></div>
</div>
		</div>
		<div class="odd" id="comment-item-33">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-33" id="comment-33">#</a>
<span class="comment-title">проблемки с gradle</span> &mdash; 
<span class="comment-author">Дмитрий</span>
<span class="comment-date">24.05.2017 07:21</span>
<div class="comment-body" id="comment-body-33">У меня не получалось подключить dagger к проекту. Не силён в англицком, но вроде как нашёл причину проблемы и решение. Причина: gradle v2.2.0 and up. Решение: добавляем только<br/>dependencies {<br/> //...<br/> compile 'com.google.dagger:dagger:2.11-rc2'<br/> annotationProcessor 'com.google.dagger:dagger-compiler:2.11-rc2'<br/>} <br/>А это не используем (убираем):<br/>classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'<br/>apply plugin: 'com.neenbedankt.android-apt'<br/>apt 'com.google.dagger:dagger-compiler:2.0'<br/><br/>Может кому-то поможет.<br/>https://stackoverflow.com/questions/38770381/move-toward-j8-and-jack-gradle-sync-error</div>
</div><div class="clear"></div>
</div>
		</div>
		<div class="even" id="comment-item-60">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-60" id="comment-60">#</a>
<span class="comment-title">Замечательное изложение</span> &mdash; 
<span class="comment-author">Евгений</span>
<span class="comment-date">18.11.2017 00:51</span>
<div class="comment-body" id="comment-body-60">Благодарю за качественное изложение, наконец у меня сформировалась картина происходящего</div>
</div><div class="clear"></div>
</div>
		</div>
		<div class="odd" id="comment-item-148">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-148" id="comment-148">#</a>
<span class="comment-title">awesome!</span> &mdash; 
<span class="comment-author">Дмитрий</span>
<span class="comment-date">13.10.2018 13:19</span>
<div class="comment-body" id="comment-body-148">Прошел весь курс (урок 6 по диагонали), и могу с уверенностью сказать - это круто! Видно что человек работает с этим, изучил досконально тему, пропустил через себя и адаптировал для курса. Особенно спасибо за такие мелочи как линки на доки везде где только можно, проекты на гитхаб, повествование от простого к сложному (особенно урок 5, просто самый жир). Вобщем, от души! Большое спасибо Дмитрий, я могу только представить какой это труд, но я надеюсь вы не собираетесь останавливаться :) Ибо курсы от практикующего - это золото! а ведь у нас еще есть котлин  <img src="/components/com_jcomments/images/smilies/wink.gif.pagespeed.ce.mqYg974vLI.gif" alt=";-)"/>  Буду ждать новых курсов, уже поглядываю на тестирование, но еще нужно сначала закончить Rx  <img src="/components/com_jcomments/images/smilies/xcool.gif.pagespeed.ic.dsPw2SvSuA.png" alt="8)"/> </div>
</div><div class="clear"></div>
</div>
		</div>
		<div class="even" id="comment-item-153">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-153" id="comment-153">#</a>
<span class="comment-title">web hosting package cheap</span> &mdash; 
<span class="comment-author">profile</span>
<span class="comment-date">28.10.2018 10:47</span>
<div class="comment-body" id="comment-body-153">Need cheap hosting? Try webhosting1st, just $10 for an year.<br/><br/>https://ixram.ru/images/photos/349/95/ef1d17b19460ed4f87b5d5bb.jpg</div>
</div><div class="clear"></div>
</div>
		</div>
		<div class="odd" id="comment-item-181">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-181" id="comment-181">#</a>
<span class="comment-title">Вадим</span> &mdash; 
<span class="comment-author">Vadim</span>
<span class="comment-date">05.04.2019 17:06</span>
<div class="comment-body" id="comment-body-181">"К плюсам даггера относят то, что если у вас есть какая-то ошибка в построении зависимостей, то вы узнаете об этом не в Runtime, а на этапе компиляции. Давайте проверим. Создадим еще один пустой класс Preferences"<br/><br/>Может к минусам?</div>
</div><div class="clear"></div>
</div>
	</div>
	<div class="comments-list" id="comments-list-181">
		<div class="even" id="comment-item-192">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-192" id="comment-192">#</a>
<span class="comment-title">RE: Вадим</span> &mdash; 
<span class="comment-author">Vsevolod</span>
<span class="comment-date">08.07.2019 16:21</span>
<div class="comment-body" id="comment-body-192">странный вопрос... почему к минусам? что лучше: приложение, которое не компилируется или приложение, которое падает в рантайме? 0_о</div>
</div><div class="clear"></div>
</div>
		</div>
	</div>
		<div class="odd" id="comment-item-195">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-195" id="comment-195">#</a>
<span class="comment-title">RE: Урок 1. Введение</span> &mdash; 
<span class="comment-author">Shams</span>
<span class="comment-date">13.11.2019 13:57</span>
<div class="comment-body" id="comment-body-195">Большое спасибо автору за отличную статью. Даже на английском сегменте не нашел хорошую статью на эту тему. А тут все понятно и просто.</div>
</div><div class="clear"></div>
</div>
		</div>
		<div class="even" id="comment-item-216">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-216" id="comment-216">#</a>
<span class="comment-title">вопрос - по @Inject</span> &mdash; 
<span class="comment-author">Dmitriy</span>
<span class="comment-date">10.01.2020 12:54</span>
<div class="comment-body" id="comment-body-216">стартует активити <br/><br/>если я в onCreate <br/>через getComponent беру указатель все окей. я сразу в обьект сетю данные.<br/><br/>если я делаю @Inject ... то сетить в он OnCreate я немогу... у меня там нулевой указатель. как правильно тогда использовать в активити inject ?</div>
</div><div class="clear"></div>
</div>
	</div>
	<div class="comments-list" id="comments-list-216">
		<div class="odd" id="comment-item-217">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-217" id="comment-217">#</a>
<span class="comment-title">мой косяк</span> &mdash; 
<span class="comment-author">Dmitriy</span>
<span class="comment-date">10.01.2020 12:59</span>
<div class="comment-body" id="comment-body-217">я думал это как @Autowired в спринге...а тут App.getComponent().injectsMainActivity(this); забыл</div>
</div><div class="clear"></div>
</div>
		</div>
	</div>
		<div class="even" id="comment-item-220">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-220" id="comment-220">#</a>
<span class="comment-title">Inject-методы - не работает</span> &mdash; 
<span class="comment-author">Vadim</span>
<span class="comment-date">18.01.2020 06:22</span>
<div class="comment-body" id="comment-body-220">Через Get-методы всё работает, причём даже без класса App, через Inject - нет, хоть с App, хоть без него. У моего DaggerGetbreakfast компонета нет метода create() и я не могу выполнить component = DaggerGetbreakfast.create(); В чём может быть проблема?</div>
</div><div class="clear"></div>
</div>
	</div>
	<div class="comments-list" id="comments-list-220">
		<div class="odd" id="comment-item-221">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-221" id="comment-221">#</a>
<span class="comment-title">RE: Inject-методы - не работает</span> &mdash; 
<span class="comment-author">Vadim</span>
<span class="comment-date">18.01.2020 17:31</span>
<div class="comment-body" id="comment-body-221">Разобрался, всё работает  <img src="/components/com_jcomments/images/smilies/smile.gif.pagespeed.ce.WvBZiFFcYG.gif" alt=":-)"/> </div>
</div><div class="clear"></div>
</div>
		</div>
	</div>
		<div class="even" id="comment-item-286">
<div class="rbox">
<div class="comment-box">
<a class="comment-anchor" href="/ru/16-course/dagger2/424-urok-1.html#comment-286" id="comment-286">#</a>
<span class="comment-title">Спасибо</span> &mdash; 
<span class="comment-author">Sergey</span>
<span class="comment-date">09.07.2020 14:02</span>
<div class="comment-body" id="comment-body-286">прочитал, прочитал вдумчиво, нарисовал схему на бумаге. - всё четко по полкам, - купил все курсы, надеюсь и дальше всё красиво и понятно будет - СПАСИБО за вашу работу.  <img src="/components/com_jcomments/images/smilies/smile.gif.pagespeed.ce.WvBZiFFcYG.gif" alt=":-)"/> </div>
</div><div class="clear"></div>
</div>
		</div>
</div>
<div id="comments-list-footer"><a class="refresh" href="#" title="Обновить список комментариев" onclick="jcomments.showPage(424,'com_content',0);return false;">Обновить список комментариев</a><br/><a class="rss" href="/ru/component/jcomments/feed/com_content/424.html" title="RSS лента комментариев этой записи" target="_blank">RSS лента комментариев этой записи</a></div>
</div>
<a id="addcomments" href="#addcomments"></a>
<div id="comments-footer" align="center"><a href="http://www.joomlatune.ru" title="JComments" target="_blank">JComments</a></div>
<script type="text/javascript">jcomments.setAntiCache(1,1,0);</script> 
</div></div>


		</div>
		<!-- //MAIN CONTENT -->

		<!-- SIDEBAR LEFT -->
		<div class="t3-sidebar t3-sidebar-left col-xs-12 col-sm-4 col-sm-pull-8 col-md-3 col-md-pull-9 ">
			<div class="t3-module module " id="Mod87"><div class="module-inner"><div class="module-ct"><div class="mod-languages">
	<div class="pretext"><p><h1>Language</h1></p></div>

	<ul class="lang-inline" dir="ltr">
									<li class="lang-active">
			<a href="https://startandroid.ru/ru/16-course/dagger2/424-urok-1.html">
												<img src="/media/mod_languages/images/ru.gif.pagespeed.ce.bzLHrnbLL7.gif" alt="Русский" title="Русский"/>										</a>
			</li>
								<li>
			<a href="/en/18-courses/dagger-2/432-lesson-1-introduction.html">
												<img src="/media/mod_languages/images/xen.gif.pagespeed.ic.a_9qHVLn30.png" alt="English (UK)" title="English (UK)"/>										</a>
			</li>
				</ul>

</div>
</div></div></div><div class="t3-module module " id="Mod323"><div class="module-inner"><div class="module-ct">

<div class="custom">
	<div align="center">
<h2>Автор сайта</h2>
<p><img src="/images/stories/pic/150x150xdmitryvinogradov.jpg.pagespeed.ic.ZW6Ncwy8-8.jpg" width="150" height="150"/></p>
<p>Дмитрий Виноградов</p>
<p>Подробнее можно <a href="https://youtu.be/xPuiCBRmJDg?t=102" target="_blank" rel="noopener noreferrer">посмотреть</a> или <a href="/ru/about/ob-avtore.html" target="_blank" rel="noopener noreferrer">почитать</a>.</p>
<p>Никакие другие люди не имеют к этому сайту никакого отношения и просто занимаются плагиатом.</p>
</div></div>
</div></div></div><div class="t3-module module " id="Mod139"><div class="module-inner"><div class="module-ct"><div class="bannergroup">

	<div class="banneritem">
																																																																			<a href="/ru/component/banners/click/4.html" title="Курс тестирование">
							<img src="https://startandroid.ru/images/banners/xbanner_testing.png.pagespeed.ic.dMYEYF8CoP.png" alt="Курс тестирование"/>
						</a>
																<div class="clr"></div>
	</div>

</div>
</div></div></div><div class="t3-module module " id="Mod91"><div class="module-inner"><div class="module-ct">

<div class="custom">
	<div align="center"><h2>Социальные сети</h2></div>
<p> </p>
<div align="center">
<p><img src="/images/stories/pic/telegram.png.pagespeed.ce.nkfL74AMTR.png" alt="" width="100" height="100"/></p>
<p>В <a href="https://t.me/startandroid" target="_blank">канале</a> я публикую ссылки на интересные и полезные статьи по Android</p>
<p>В <a href="https://t.me/startandroidchat" target="_blank">чате</a> можно обсудить вопросы и проблемы, возникающие при разработке</p>
</div>

<br><br>
<script type="text/javascript" src="//vk.com/js/api/openapi.js?144"></script>
<!-- VK Widget -->

<div align="center"><h4>Группа ВКонтакте</h4>
<div id="vk_groups"></div>
</div>
<script type="text/javascript">VK.Widgets.Group("vk_groups",{mode:3},36284347);</script>
<br><br>
</div>
</div></div></div><div class="t3-module module " id="Mod90"><div class="module-inner"><div class="module-ct">

<div class="custom">
	<h1>Поддержка проекта</h1>
<p><a href="https://money.yandex.ru/prepaid/" target="_blank">Яндекс</a><br/><strong>410011180491924</strong></p>
<p><a href="http://www.webmoney.ru/rus/addfunds/index.shtml">WebMoney</a><br/><strong>R248743991365</strong><br/><strong>Z551306702056</strong></p>
<p><a href="https://www.paypal.me/startandroidcourse">Paypal</a></p>

</div>
</div></div></div>
		</div>
		<!-- //SIDEBAR LEFT -->

	</div>
</div> 


  


  


	
<!-- BACK TOP TOP BUTTON -->
<div id="back-to-top" data-spy="affix" data-offset-top="300" class="back-to-top hidden-xs hidden-sm affix-top">
  <button class="btn btn-primary" title="Back to Top"><i class="fa fa-caret-up"></i></button>
</div>
<script type="text/javascript">(function($){$('#back-to-top').on('click',function(){$("html, body").animate({scrollTop:0},500);return false;});$(window).load(function(){if((parseInt($(window).height())*2)>(parseInt($(document).height()))){$('#back-to-top').hide();}});})(jQuery);</script>
<!-- BACK TO TOP BUTTON -->

<!-- FOOTER -->
<footer id="t3-footer" class="wrap t3-footer">

	
	<section class="t3-copyright">
		<div class="container">
			<div class="row">
				<div class="col-md-8 copyright ">
					

<div class="custom">
	<p>© Start Android, 2011-2020. Все права защищены, копирование материалов возможно только с разрешения автора </p>
<!-- START: Modules Anywhere -->

<div class="custom">
	<p>При возникновении каких-либо вопросов, используйте <a href="http://startandroid.ru/ru/about/cntct5.html" target="blank">форму обратной связи</a> </p></div>
<!-- END: Modules Anywhere -->
<p> </p>
<p> </p></div>

          <small>
            <a href="http://twitter.github.io/bootstrap/" title="Bootstrap by Twitter" target="_blank">Bootstrap</a> is a front-end framework of Twitter, Inc. Code licensed under <a href="https://github.com/twbs/bootstrap/blob/master/LICENSE" title="MIT License" target="_blank">MIT License.</a>
          </small>
          <small>
            <a href="http://fortawesome.github.io/Font-Awesome/" target="_blank">Font Awesome</a> font licensed under <a href="http://scripts.sil.org/OFL">SIL OFL 1.1</a>.
          </small>
				</div>
									<div class="col-md-4 poweredby text-hide">
						<a class="t3-logo t3-logo-color" href="http://t3-framework.org" title="Powered By T3 Framework" target="_blank">Powered by <strong>T3 Framework</strong></a>
					</div>
							</div>
		</div>
	</section>

</footer>
<!-- //FOOTER -->

</div>
<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');ga('create','UA-19388196-4','auto');ga('send','pageview');</script>
</body>
</html>
